{"version":3,"sources":["globals/globals.js","store/slices/wireSlice.js","store/slices/blockSlice.js","store/slices/clkSlice.js","globals/clkStates.js","globals/globalStates.js","store/slices/globalStateSlice.js","store/slices/topPanelSlice.js","store/slices/commandSlice.js","store/store.js","store/localstorageApi/loadState.js","utils/toHex.js","components/field/Wire.js","hooks/usePrevious.js","components/field/clk/BeforeRisingEdge.js","components/field/clk/ClkPanel.js","components/field/WireConnection.js","components/field/BlockConnection.js","components/field/Block.js","hooks/useThrottle.js","components/field/logic-blocks/register/StateDisplayRectangle.js","components/field/logic-blocks/register/connections.js","components/field/logic-blocks/register/Register.js","components/field/logic-blocks/inc/connections.js","components/field/logic-blocks/inc/Inc.js","components/field/logic-blocks/logic-one/connections.js","components/field/logic-blocks/logic-one/LogicOne.js","components/field/logic-blocks/logic-zero/connections.js","components/field/logic-blocks/logic-zero/LogicZero.js","components/field/logic-blocks/rom/connections.js","utils/fromHex.js","components/field/logic-blocks/rom/Rom.js","components/field/logic-blocks/ram/connections.js","components/field/logic-blocks/ram/Ram.js","components/field/logic-blocks/sum/connections.js","components/field/logic-blocks/sum/Sum.js","components/field/logic-blocks/instruction-register/connections.js","components/field/logic-blocks/instruction-register/StateDisplayRectangle.js","components/field/logic-blocks/instruction-register/InstructionRegister.js","components/field/logic-blocks/global-sig/connections.js","utils/getConnections.js","components/field/logic-blocks/control-unit/connections.js","components/field/logic-blocks/global-sig/GlobalSig.js","components/field/logic-blocks/control-unit/ControlUnit.js","components/field/Field.js","components/top-panel/blocks-list/blocks/Block.js","components/top-panel/blocks-list/blocks/register/Register.js","components/top-panel/blocks-list/blocks/inc/Inc.js","components/top-panel/blocks-list/blocks/logicOne/logicOne.js","components/top-panel/blocks-list/blocks/logicZero/logicZero.js","components/top-panel/blocks-list/blocks/rom/Rom.js","components/top-panel/blocks-list/blocks/ram/Ram.js","components/top-panel/blocks-list/blocks/sum/Sum.js","components/top-panel/blocks-list/blocks/globalSig/globalSig.js","components/top-panel/blocks-list/blocks/instructionRegister/instructionRegister.js","components/top-panel/blocks-list/blocks/controlUnit/controlUnit.js","components/top-panel/blocks-list/BlocksList.js","store/localstorageApi/saveState.js","components/top-panel/tools-list/tools/saveState/SaveState.js","utils/saveToFile.js","utils/downloadFile.js","components/top-panel/tools-list/tools/loadState/LoadState.js","components/top-panel/tools-list/tools/clearField/ClearField.js","components/top-panel/tools-list/tools/delete/Delete.js","components/top-panel/tools-list/ToolsList.js","components/top-panel/TopPanel.js","components/sidebar/Sidebar.js","components/command-modal/CommandModal.js","components/WorkBench.js","index.js"],"names":["TOP_PANEL_WIDTH","window","innerWidth","CLK_PANEL_WIDTH","FIELD_WIDTH","FIELD_HEIGHT","innerHeight","BLOCK_CONNECTION_SIZE","REGISTER_BLOCK_TYPE","REGISTER_BLOCK_WIDTH","REGISTER_BLOCK_HEIGHT","INC_BLOCK_TYPE","LOGIC_ONE_BLOCK_TYPE","LOGIC_ZERO_BLOCK_TYPE","ROM_BLOCK_TYPE","ROM_BLOCK_HEIGHT","RAM_BLOCK_TYPE","RAM_BLOCK_HEIGHT","SUM_BLOCK_TYPE","GLOBAL_SIG_BLOCK_TYPE","CONTROL_UNIT_BLOCK_TYPE","INSTRUCTION_REGISTER_BLOCK_TYPE","INSTRUCTION_REGISTER_BLOCK_HEIGHT","BLOCK_SIZES","height","width","BLOCK_TYPE_NAME_MAP","wireSlice","createSlice","name","initialState","wires","wireConnections","activeConnection","activePath","activePathNodesCount","reducers","setActivePathNodesCount","state","action","payload","startWire","connection","id","position","x","y","block","connectionObject","connections","find","obj","resetWire","index","findIndex","splice","setWireToStorage","wirePath","cloneDeep","firstConnection","secondConnection","secondBlock","secondBlockConnectionObj","wireFrom","wire","split","wireTo","globalId","includes","length","toString","destinationPoint","push","updatedOnCurrentEdgeCount","path","slice","updateWirePayload","wireIndex","updatedWire","forEach","updateActiveWirePath","updateWirePath","wireId","updateWiresPaths","storageWire","setWiresPrevValue","i","prevPayload","deleteWire","wiresToStay","filter","createWireConnection","changeWireConnectionPosition","wireConnection","deleteWireConnections","resetUpdatedOnCurrentEdgeCount","setZtoNonTouchedWires","setWiresPayloadToZ","actions","blockSlice","blocks","selectedBlockId","globalSignals","commands","commandsAmount","changeBlockPosition","blockId","changeBlockPayload","changeBlockConnection","blockIndex","changedConnection","connectionId","connectedTo","connectedToType","setBlockToStorage","deleteBlock","resetConnection","resetBlockConnectionsAttachedToWire","setSelectedBlockId","changeBlockName","addGlobalSignal","existingSignal","signal","map","command","commandCode","ones","value","touched","setGlobalSignalOnes","updateGlobalSignal","changeCommandCode","commandIndex","setCommands","signalCommand","setCommandsAmount","resetSignalTouch","clkSlice","clk","clkState","clkPosition","setClk","setClkState","incrementClkPosition","setClkPosition","resetClk","STATES","globalStateSlice","globalState","statePayload","changeState","topPanelSlice","activeBlockType","setActiveBlockType","commandSlice","currentCommand","isCommandModalOpened","commandLength","changeCurrentCommand","openCommandModal","closeCommandModal","setCommandLength","setCommandCode","preloadedState","serializedState","localStorage","getItem","JSON","parse","e","loadState","configureStore","reducer","wireReducer","blockReducer","clkReducer","globalStateReducer","topPanelReducer","commandReducer","toHex","number","undefined","withoutPrefix","replace","toUpperCase","Wire","points","useSelector","wireFromBlock","wireToBlock","wireFromWire","wireToWire","dispatch","useDispatch","prevWireFromWireValue","ref","useRef","useEffect","current","usePrevious","useState","content","text","setText","isNaN","connectionIndex","newX","newY","firstPartToLengthRatio","wireStartCoords","wireEndCoords","wireFromWireConnection","wireFromBlockConnection","wireToWireConnection","wireToBlockConnection","onClick","event","target","getLayer","getRelativePointerPosition","cancelBubble","firstPoint","secondPoint","A","B","C","Math","abs","sqrt","wireLength","pow","onMouseEnter","getStage","container","style","cursor","onMouseLeave","stroke","strokeWidth","lineCap","lineJoin","opacity","fontSize","fontFamily","fill","BeforeRisingEdge","clkFromStorage","ClkPanel","linePoints","setLinePoints","drawCounter","setDrawCounter","clkDrawInterval","setInterval","lastPointX","lastPointY","horizontalLinePoint","risingLinePoint","fallingLinePoint","setTimeout","counterPointMap","counter","CLK_PERIOD","clearInterval","setClkToStorage","Consumer","store","WireConnection","shadowBlur","BlockConnection","input","setConnection","Block","slot","color","isActive","setIsActive","blockRef","cb","delay","cbRef","useCallback","throttle","leading","trailing","useThrottle","newCoordinates","draggable","onDragMove","stopDrag","children","getAbsolutePosition","setAbsolutePosition","type","StateDisplayRectangle","inputConnections","outputConnections","inputConnectionsYOffset","outputConnectionsYOffset","Register","getConnections","wiresRef","setState","dWire","qWire","enWire","oEnWire","isOenWireStable","INC_BLOCK_WIDTH","InstructionRegister","inWire","outWire","LOGIC_ONE_BLOCK_WIDTH","LogicOne","LogicZero","ROM_BLOCK_WIDTH","fromHex","hexString","parseInt","Rom","initialRomData","Array","executingAddress","activeAddress","romData","data","incWire","isEnWireStable","isIncWireStable","divProps","marginTop","marginLeft","onInput","RAM_BLOCK_WIDTH","Ram","initialRamData","ramData","addr","readAddr","en","rNw","isEnStable","isRnwStable","dataCopy","SUM_BLOCK_WIDTH","Sum","in1Wire","in2Wire","INSTRUCTION_REGISTER_BLOCK_WIDTH","shouldChangeCommandOnNextStep","setShouldChangeCommandOnNextStep","isInitialRender","setIsInitialRender","GLOBAL_SIG_BLOCK_WIDTH","toLowerCase","registerConnections","incConnections","logicOneConnections","logicZeroConnections","RomConnections","RamConnections","SumConnections","globalSigConnections","instructionRegisterConnections","GlobalSig","ControlUnit","one","display","flexDirection","Field","globalStatePayload","layerRef","document","onkeydown","evt","keyCode","newWire","last","handleClickOnField","deleteX","deleteY","_","blockWidth","blockHeight","lastBlockId","blockType","handleMouseMove","className","onMouseMove","blockBodyStyle","setBlockBodyStyle","alreadyMoving","Inc","BlocksList","saveState","a","stringify","setItem","fileContents","file","link","createElement","href","URL","createObjectURL","download","body","appendChild","click","revokeObjectURL","parentNode","removeChild","downloadFile","getState","File","saveStateToLocalStorage","querySelector","onChange","files","reader","FileReader","readAsText","onload","result","location","reload","swalWithButtons","Swal","mixin","customClass","confirmButton","cancelButton","buttonsStyling","ClearField","fire","title","icon","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","isConfirmed","Delete","ToolsList","tools","TopPanel","Sidebar","selectedBlock","selectedBlockState","setSelectedBlockState","clonedPayload","address","handlePayloadChange","blockInfo","stateInput","handleRegisterStateChange","clkButtons","CommandModal","commandAmount","localCommandAmount","setLocalCommandAmount","isOpened","commandCodes","setCommandCodes","commandsCodes","newCommands","defaultValue","nameInput","codeInput","lengthInput","commandsCopy","commandToChange","commandCodesCopy","handleCommandSettingsChange","range","edgeNumber","index2","contentEditable","suppressContentEditableWarning","currentTarget","textContent","clonedOnes","sort","b","difference","handleSignalEdgeInput","WorkBench","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b854cece.chunk.js","sourcesContent":["export const TOP_PANEL_WIDTH = window.innerWidth;\nexport const TOP_PANEL_HEIGHT = 80;\n\nexport const SIDEBAR_WIDTH = 170;\n\nexport const CLK_PANEL_WIDTH = window.innerWidth ;\nexport const CLK_PANEL_HEIGHT = 70;\n\nexport const FIELD_WIDTH = window.innerWidth - SIDEBAR_WIDTH;\nexport const FIELD_HEIGHT = window.innerHeight - TOP_PANEL_HEIGHT - CLK_PANEL_HEIGHT;\n\nexport const BLOCK_CONNECTION_SIZE = 10;\nexport const WIRE_CONNECTION_SIZE = 10;\n\nexport const REGISTER_BLOCK_TYPE = 'register';\nexport const REGISTER_BLOCK_WIDTH = 100;\nexport const REGISTER_BLOCK_HEIGHT = 100;\nexport const REGISTER_BLOCK_COLOR = 'red';\n\nexport const INC_BLOCK_TYPE = 'inc';\nexport const INC_BLOCK_WIDTH = 70;\nexport const INC_BLOCK_HEIGHT = 70;\nexport const INC_BLOCK_COLOR = 'blue';\n\nexport const LOGIC_ONE_BLOCK_TYPE = 'logic-one';\nexport const LOGIC_ONE_BLOCK_WIDTH = 30;\nexport const LOGIC_ONE_BLOCK_HEIGHT = 30;\nexport const LOGIC_ONE_BLOCK_COLOR = 'yellow';\n\nexport const LOGIC_ZERO_BLOCK_TYPE = 'logic-zero';\nexport const LOGIC_ZERO_BLOCK_WIDTH = 30;\nexport const LOGIC_ZERO_BLOCK_HEIGHT = 30;\nexport const LOGIC_ZERO_BLOCK_COLOR = 'green';\n\nexport const ROM_BLOCK_TYPE = 'rom';\nexport const ROM_BLOCK_WIDTH = 200;\nexport const ROM_BLOCK_HEIGHT = 300;\nexport const ROM_BLOCK_COLOR = 'orange';\n\nexport const RAM_BLOCK_TYPE = 'ram';\nexport const RAM_BLOCK_WIDTH = 200;\nexport const RAM_BLOCK_HEIGHT = 300;\nexport const RAM_BLOCK_COLOR = 'teal';\n\nexport const SUM_BLOCK_TYPE = 'sum';\nexport const SUM_BLOCK_WIDTH = 90;\nexport const SUM_BLOCK_HEIGHT = 90;\nexport const SUM_BLOCK_COLOR = 'wheat';\n\nexport const GLOBAL_SIG_BLOCK_TYPE = 'global-sig';\nexport const GLOBAL_SIG_BLOCK_WIDTH = 70;\nexport const GLOBAL_SIG_BLOCK_HEIGHT = 70;\nexport const GLOBAL_SIG_BLOCK_COLOR = '#d645d6';\n\nexport const CONTROL_UNIT_BLOCK_TYPE = 'control-unit';\nexport const CONTROL_UNIT_BLOCK_WIDTH = 150;\nexport const CONTROL_UNIT_BLOCK_HEIGHT = 200;\nexport const CONTROL_UNIT_BLOCK_COLOR = 'slateGray';\n\nexport const INSTRUCTION_REGISTER_BLOCK_TYPE = 'instruction-register';\nexport const INSTRUCTION_REGISTER_BLOCK_WIDTH = 150;\nexport const INSTRUCTION_REGISTER_BLOCK_HEIGHT = 150;\nexport const INSTRUCTION_REGISTER_BLOCK_COLOR = 'coral';\n\n\nexport const BLOCK_SIZES = {\n    [REGISTER_BLOCK_TYPE]: {\n        height: REGISTER_BLOCK_HEIGHT,\n        width: REGISTER_BLOCK_WIDTH,\n    },\n    [INC_BLOCK_TYPE]: {\n        height: INC_BLOCK_HEIGHT,\n        width: INC_BLOCK_WIDTH,\n    },\n    [LOGIC_ONE_BLOCK_TYPE]: {\n        height: LOGIC_ONE_BLOCK_HEIGHT,\n        width: LOGIC_ONE_BLOCK_WIDTH,\n    },\n    [LOGIC_ZERO_BLOCK_TYPE]: {\n        height: LOGIC_ZERO_BLOCK_HEIGHT,\n        width: LOGIC_ZERO_BLOCK_WIDTH,\n    },\n    [ROM_BLOCK_TYPE]: {\n        height: ROM_BLOCK_HEIGHT,\n        width: ROM_BLOCK_WIDTH,\n    },\n    [RAM_BLOCK_TYPE]: {\n        height: RAM_BLOCK_HEIGHT,\n        width: RAM_BLOCK_WIDTH,\n    },\n    [SUM_BLOCK_TYPE]: {\n        height: SUM_BLOCK_HEIGHT,\n        width: SUM_BLOCK_WIDTH,\n    },\n    [GLOBAL_SIG_BLOCK_TYPE]: {\n        height: GLOBAL_SIG_BLOCK_HEIGHT,\n        width: GLOBAL_SIG_BLOCK_WIDTH,\n    },\n    [CONTROL_UNIT_BLOCK_TYPE]: {\n        height: CONTROL_UNIT_BLOCK_HEIGHT,\n        width: CONTROL_UNIT_BLOCK_WIDTH,\n    },\n    [INSTRUCTION_REGISTER_BLOCK_TYPE]: {\n        height: INSTRUCTION_REGISTER_BLOCK_HEIGHT,\n        width: INSTRUCTION_REGISTER_BLOCK_WIDTH,\n    },\n};\n\nexport const BLOCK_TYPE_NAME_MAP = {\n    [REGISTER_BLOCK_TYPE]: 'Register',\n    [INC_BLOCK_TYPE]: 'inc',\n    [LOGIC_ONE_BLOCK_TYPE]: '1',\n    [LOGIC_ZERO_BLOCK_TYPE]: '0',\n    [ROM_BLOCK_TYPE]: 'Rom',\n    [RAM_BLOCK_TYPE]: 'Ram',\n    [SUM_BLOCK_TYPE]: 'Sum',\n    [GLOBAL_SIG_BLOCK_TYPE]: 'Sig',\n    [CONTROL_UNIT_BLOCK_TYPE]: 'Control unit',\n    [INSTRUCTION_REGISTER_BLOCK_TYPE]: 'Instr. Reg.',\n};\n\n","import {createSlice} from '@reduxjs/toolkit'\nimport { cloneDeep } from 'lodash'\nimport { BLOCK_CONNECTION_SIZE } from '../../globals/globals';\n\n/*\n    wire: {id, connections, path, payload, prevPayload}\n                   ||\n                   \\/\n               connection: {id, name, blockId|wireId, connectedTo(wire), input(true, false), position}\n */\n\nexport const wireSlice = createSlice({\n    name: 'wires',\n    initialState: {\n        wires: [],\n        wireConnections: [],\n        activeConnection: null,\n        activePath: null,\n        activePathNodesCount: 1,\n    },\n    reducers: {\n        setActivePathNodesCount: (state, action) => {\n            state.activePathNodesCount = action.payload;\n        },\n        startWire: (state, action) => {\n            const isWireConnection = typeof action.payload.connection === 'object';\n            if (!isWireConnection) {\n                const connection = action.payload.connection;\n                const block = action.payload.block;\n\n                const connectionObject = block.connections.find(obj => obj.id === connection);\n\n                state.activeConnection = connection;\n                state.activePath = [\n                    connectionObject.position.x + BLOCK_CONNECTION_SIZE / 2 + block.position.x,\n                    connectionObject.position.y + BLOCK_CONNECTION_SIZE / 2 + block.position.y,\n                ];\n            } else {\n                state.activeConnection = action.payload.connection.id;\n                state.activePath = [\n                    action.payload.connection.position.x + BLOCK_CONNECTION_SIZE / 2,\n                    action.payload.connection.position.y + BLOCK_CONNECTION_SIZE / 2,\n                ];\n            }\n        },\n        resetWire: (state) => {\n            const index = state.wireConnections.findIndex(connection =>  {\n                return connection.id === state.activeConnection;\n            });\n            if (index !== -1) {\n                state.wireConnections.splice(index, 1);\n            }\n            state.activeConnection = null;\n            state.activePath = null;\n            state.activePathNodesCount = 1;\n        },\n        setWireToStorage: (state, action) => {\n            state.activeConnection = null;\n            const wirePath = cloneDeep(state.activePath);\n            state.activePath = null;\n            state.activePathNodesCount = 1;\n            let {\n                firstConnection,\n                secondConnection,\n                secondBlock\n            } = action.payload\n\n            let secondBlockConnectionObj = null;\n            if (secondBlock) {\n                secondBlockConnectionObj = secondBlock.connections.find(connection => connection.id === secondConnection);\n            }\n\n            const wireFrom = state.wires.find(wire => wire.id === firstConnection.split('.')[1]);\n            const wireTo = state.wires.find(wire => wire.id === secondConnection.id?.split('.')[1]);\n            let globalId = firstConnection.includes('wire') ? wireFrom.globalId : state.wires.length.toString();\n\n            if (wireTo) {\n                globalId = secondConnection.id.includes('wire') ? wireTo.globalId : globalId;\n            }\n\n            let destinationPoint = null;\n            if (secondBlock) {\n                destinationPoint = [\n                    secondBlock.position.x + secondBlockConnectionObj.position.x + BLOCK_CONNECTION_SIZE / 2,\n                    secondBlock.position.y + secondBlockConnectionObj.position.y + BLOCK_CONNECTION_SIZE / 2\n                ];\n            } else {\n                destinationPoint = [\n                    secondConnection.position.x + BLOCK_CONNECTION_SIZE / 2,\n                    secondConnection.position.y + BLOCK_CONNECTION_SIZE / 2,\n                ];\n                secondConnection = secondConnection.id;\n            }\n\n            state.wires.push({\n                id: state.wires.length.toString(),\n                globalId: globalId,\n                connections: [firstConnection, secondConnection],\n                payload: 'z',\n                updatedOnCurrentEdgeCount: 0,\n                path: [\n                    ...wirePath.slice(0, -2),\n                    ...destinationPoint\n                ],\n            });\n        },\n        updateWirePayload: (state, action) => {\n            const wireIndex = state.wires.findIndex(wire => wire.id === action.payload.id);\n            const updatedWire =  state.wires[wireIndex];\n            updatedWire.updatedOnCurrentEdgeCount = updatedWire.updatedOnCurrentEdgeCount + 1;\n\n            if (updatedWire.updatedOnCurrentEdgeCount === 1) {\n                updatedWire.payload = action.payload.payload;\n            } else {\n                updatedWire.payload = 'x';\n            }\n\n            state.wires.forEach(wire => {\n                if (wire.globalId === updatedWire.globalId && wire.id !== action.payload.id) {\n                    wire.updatedOnCurrentEdgeCount = wire.updatedOnCurrentEdgeCount + 1;\n                    if (updatedWire.updatedOnCurrentEdgeCount === 1) {\n                        wire.payload = action.payload.payload;\n                    } else {\n                        wire.payload = 'x';\n                    }\n                }\n            });\n        },\n        updateActiveWirePath: (state, action) => {\n            state.activePath = state.activePath ? state.activePath.slice(0, state.activePathNodesCount * 2) : [];\n            state.activePath = [...state.activePath, action.payload.x, action.payload.y];\n        },\n        updateWirePath: (state, action) => {\n            const wire = state.wires.find(wire => wire.id === action.payload.wireId);\n            wire.path = action.payload.path;\n        },\n        updateWiresPaths: (state, action) => {\n            action.payload.forEach(wire => {\n                const wireFromStorage = state.wires.find(storageWire => storageWire.id === wire.wireId);\n                wireFromStorage.path = wire.path;\n            });\n        },\n        setWiresPrevValue: (state, action) => {\n            for (let i = 0; i < state.wires.length; i++) {\n                state.wires[i].prevPayload = state.wires[i].payload\n            }\n        },\n        deleteWire: (state, action) => {\n            const wiresToStay = state.wires.filter(wire => wire.globalId !== action.payload.wireId);\n            state.wires = wiresToStay;\n        },\n        createWireConnection: (state, action) => {\n            state.wireConnections.push(action.payload);\n        },\n        changeWireConnectionPosition: (state, action) => {\n            const wireConnection = state.wireConnections.find(connection => connection.id === action.payload.id);\n            wireConnection.position.x = action.payload.x;\n            wireConnection.position.y = action.payload.y;\n        },\n        deleteWireConnections: (state, action) => {\n            state.wireConnections = state.wireConnections.filter(connection => {\n                return connection.wireId !== action.payload.wireId;\n            });\n        },\n        resetUpdatedOnCurrentEdgeCount: (state) => {\n            state.wires.forEach(wire => {\n                wire.updatedOnCurrentEdgeCount = 0;\n            });\n        },\n        setZtoNonTouchedWires: (state) => {\n            state.wires.forEach(wire => {\n                if (wire.updatedOnCurrentEdgeCount === 0) {\n                    wire.payload = 'z';\n                }\n            });\n        },\n        setWiresPayloadToZ: (state) => {\n            state.wires.forEach(wire => {\n                wire.payload = 'z';\n            });\n        },\n    }\n})\n\n// Action creators are generated for each case reducer function\nexport const {\n    startWire,\n    resetWire,\n    setWireToStorage,\n    updateWirePayload,\n    updateActiveWirePath,\n    updateWirePath,\n    setWiresPrevValue,\n    deleteWire,\n    createWireConnection,\n    changeWireConnectionPosition,\n    updateWiresPaths,\n    setActivePathNodesCount,\n    deleteWireConnections,\n    resetUpdatedOnCurrentEdgeCount,\n    setZtoNonTouchedWires,\n    setWiresPayloadToZ\n} = wireSlice.actions\n\nexport default wireSlice.reducer","import { createSlice } from '@reduxjs/toolkit';\n\n/*\n    block: {id, name, connections, position}\n                           ||\n                           \\/\n                       connection: {id, name, blockId, connectedTo(wire), type(in, out), position}\n */\n\nexport const blockSlice = createSlice({\n    name: 'blocks',\n    initialState: {\n        blocks: [],\n        selectedBlockId: null,\n        globalSignals: [],\n        commands: [],\n        commandsAmount: 0,\n    },\n    reducers: {\n        changeBlockPosition: (state, action) => {\n            const block = state.blocks.find(block => block.id === action.payload.blockId);\n            block.position = action.payload.position;\n        },\n        changeBlockPayload: (state, action) => {\n            const block = state.blocks.find(block => block.id === action.payload.blockId);\n            if (typeof action.payload.payload === 'object') {\n                block.payload = {...block.payload, ...action.payload.payload};\n            } else {\n                block.payload = action.payload.payload;\n            }\n        },\n        changeBlockConnection: (state, action) => {\n            let blockIndex = state.blocks.findIndex(block => block.id === action.payload.blockId);\n            const changedConnection = state.blocks[blockIndex].connections.find(connection => {\n                return connection.id === action.payload.connectionId;\n            });\n            changedConnection.connectedTo = action.payload.connectedTo;\n            changedConnection.connectedToType = action.payload.connectedToType;\n        },\n        setBlockToStorage: (state, action) => {\n            state.blocks.push(action.payload);\n        },\n        deleteBlock: (state, action) => {\n            let blockIndex = state.blocks.findIndex(block => block.id === action.payload.blockId);\n            state.blocks.splice(blockIndex, 1);\n        },\n        resetConnection: (state, action) => {\n            let block = state.blocks.find(block => block.id === action.payload.blockId);\n            let connection = block.connections.find(connection => {\n                return connection.id === action.payload.connection\n            });\n            connection.connectedTo = null;\n        },\n        resetBlockConnectionsAttachedToWire: (state, action) => {\n            state.blocks.forEach(block => {\n                block.connections.forEach(connection => {\n                    if (connection.connectedTo === action.payload.wireId) {\n                        connection.connectedTo = null;\n                    }\n                });\n            });\n        },\n        setSelectedBlockId: (state, action) => {\n            state.selectedBlockId = action.payload.blockId;\n        },\n        changeBlockName: (state, action) => {\n            const block = state.blocks.find(block => block.id === action.payload.blockId);\n            block.name = action.payload.name;\n        },\n        addGlobalSignal: (state, action) => {\n            const existingSignal = state.globalSignals.find(signal => signal.blockId === action.payload.blockId);\n\n            if (!existingSignal) {\n                const commands = state.commands.map(command => {\n                    return {\n                        commandCode: command.commandCode,\n                        ones: [],\n                    };\n                });\n\n                state.globalSignals.push({\n                    name: action.payload.name,\n                    blockId: action.payload.blockId,\n                    value: 'z',\n                    commands: commands,\n                    touched: false,\n                });\n            } else {\n                existingSignal.name = action.payload.name;\n            }\n        },\n        setGlobalSignalOnes: (state, action) => {\n            const signal = state.globalSignals.find(signal => signal.blockId === action.payload.blockId);\n            const command = signal.commands.find(command => command.commandCode === action.payload.commandCode);\n            command.ones = action.payload.ones;\n        },\n        updateGlobalSignal: (state, action) => {\n            const signal = state.globalSignals.find(signal => signal.blockId === action.payload.blockId);\n            signal.touched = action.payload.touched;\n            signal.value = action.payload.value;\n        },\n        changeCommandCode: (state, action) => {\n            state.commands[action.payload.commandIndex].commandCode = action.payload.commandCode;\n            state.globalSignals.forEach(signal => {\n                signal.commands[action.payload.commandIndex].commandCode = action.payload.commandCode;\n            });\n        },\n        setCommands: (state, action) => {\n            state.commands = action.payload;\n            state.commands.forEach(command => {\n               state.globalSignals.forEach(signal => {\n                   if (!signal.commands.find(signalCommand => signalCommand.commandCode === command.commandCode)) {\n                       signal.commands.push({\n                           commandCode: command.commandCode,\n                           ones: [],\n                       });\n                   }\n                   signal.commands = signal.commands.filter(signalCommand => {\n                       return state.commands.map(command => command.commandCode).includes(signalCommand.commandCode);\n                   });\n               });\n            });\n        },\n        setCommandsAmount: (state, action) => {\n            state.commandsAmount = action.payload;\n        },\n        resetSignalTouch: (state) => {\n            state.globalSignals.forEach(signal => {\n                signal.touched = false;\n            });\n        },\n    }\n})\n\n// Action creators are generated for each case reducer function\nexport const {\n    changeBlockPosition,\n    changeBlockPayload,\n    setBlockToStorage,\n    changeBlockConnection,\n    deleteBlock,\n    setSelectedBlockId,\n    changeBlockName,\n    setGlobalSignalOnes,\n    addGlobalSignal,\n    updateGlobalSignal,\n    setCommands,\n    setCommandsAmount,\n    changeCommandCode,\n    resetSignalTouch,\n} = blockSlice.actions\n\nexport default blockSlice.reducer","import { createSlice } from '@reduxjs/toolkit';\nimport { STOP_CLK_STATE, RESET_CLK_STATE } from \"../../globals/clkStates\";\n\nexport const clkSlice = createSlice({\n    name: 'clk',\n    initialState: {\n        clk: 0,\n        clkState: STOP_CLK_STATE,\n        clkPosition: 1,\n    },\n    reducers: {\n        setClk: (state, action) => {\n            state.clk = action.payload;\n        },\n        setClkState: (state, action) => {\n            state.clkState = action.payload;\n        },\n        incrementClkPosition: (state) => {\n            state.clkPosition = state.clkPosition + 1;\n        },\n        setClkPosition: (state, action) => {\n            state.clkPosition = action.payload;\n        },\n        resetClk: (state) => {\n            state.clkState = RESET_CLK_STATE;\n            state.clkPosition = 1;\n        },\n    }\n})\n\n// Action creators are generated for each case reducer function\nexport const { setClk, setClkState, incrementClkPosition, resetClk, setClkPosition } = clkSlice.actions\n\nexport default clkSlice.reducer","export const STOP_CLK_STATE = 0;\nexport const START_CLK_STATE = 1;\nexport const RESET_CLK_STATE = 2;","export const STATES = {\n    GENERAL: 1,\n    ADDING_BLOCKS: 2,\n    CANCEL_ADDING_BLOCKS: 3,\n    DELETING: 4,\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { STATES } from '../../globals/globalStates';\n\nexport const globalStateSlice = createSlice({\n    name: 'globalState',\n    initialState: {\n        globalState: STATES.GENERAL,\n        statePayload: null,\n    },\n    reducers: {\n        changeState: (state, action) => {\n            if (!action.payload.statePayload) {\n                state.globalState = action.payload;\n                return;\n            }\n            state.globalState = action.payload.state;\n            state.statePayload = action.payload.statePayload;\n        }\n    }\n})\n\n// Action creators are generated for each case reducer function\nexport const { changeState } = globalStateSlice.actions\n\nexport default globalStateSlice.reducer","import { createSlice } from '@reduxjs/toolkit';\n\nexport const topPanelSlice = createSlice({\n    name: 'topPanel',\n    initialState: {\n        activeBlockType: null,\n    },\n    reducers: {\n        setActiveBlockType: (state, action) => {\n            if (state.activeBlockType === action.payload) {\n                state.activeBlockType = null;\n            } else {\n                state.activeBlockType = action.payload;\n            }\n        }\n    }\n})\n\n// Action creators are generated for each case reducer function\nexport const { setActiveBlockType } = topPanelSlice.actions\n\nexport default topPanelSlice.reducer","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const commandSlice = createSlice({\n    name: 'command',\n    initialState: {\n        currentCommand: 0,\n        isCommandModalOpened: false,\n        commandLength: 0,\n        commandCode: 11111111,\n    },\n    reducers: {\n        changeCurrentCommand: (state, action) => {\n           state.currentCommand = action.payload;\n        },\n        openCommandModal: (state) => {\n            state.isCommandModalOpened = true;\n        },\n        closeCommandModal: (state) => {\n            state.isCommandModalOpened = false;\n        },\n        setCommandLength: (state, action) => {\n            state.commandLength = action.payload;\n        },\n        setCommandCode: (state, action) => {\n            state.commandCode = action.payload;\n        },\n    }\n})\n\n// Action creators are generated for each case reducer function\nexport const { changeCurrentCommand, openCommandModal, closeCommandModal, setCommandLength, setCommandCode } = commandSlice.actions\n\nexport default commandSlice.reducer","import { configureStore } from '@reduxjs/toolkit';\nimport wireReducer from './slices/wireSlice';\nimport blockReducer from './slices/blockSlice';\nimport clkReducer from './slices/clkSlice';\nimport globalStateReducer from \"./slices/globalStateSlice\";\nimport topPanelReducer from \"./slices/topPanelSlice\";\nimport commandReducer from \"./slices/commandSlice\";\nimport loadState from \"./localstorageApi/loadState\";\n\nconst preloadedState = loadState();\n\nexport default configureStore({\n    reducer: {\n        wireReducer,\n        blockReducer,\n        clkReducer,\n        globalStateReducer,\n        topPanelReducer,\n        commandReducer,\n    },\n    preloadedState: preloadedState,\n})","export default function loadState() {\n    try {\n        const serializedState = localStorage.getItem('redux');\n        if (!serializedState) return undefined;\n        return JSON.parse(JSON.parse(serializedState));\n    } catch (e) {\n        return undefined;\n    }\n}","export default function toHex(number) {\n    if (number === null || number === undefined) {\n        return '';\n    }\n\n    if (number === 'z') {\n        return 'z';\n    }\n\n    if (number === 'x') {\n        return 'x';\n    }\n\n    let withoutPrefix = number.toString(16).length === 1\n        ? (`0${number.toString(16)}`).replace('0x', '')\n        : number.toString(16).replace('0x', '');\n\n    withoutPrefix = withoutPrefix.toUpperCase();\n\n    return `0x${withoutPrefix}`;\n}","import { Group, Line, Ellipse, Text } from 'react-konva';\nimport {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {STATES} from \"../../globals/globalStates\";\nimport { BLOCK_CONNECTION_SIZE } from '../../globals/globals';\nimport {\n    createWireConnection,\n    startWire,\n    changeWireConnectionPosition,\n    updateWirePath,\n    deleteWire,\n    deleteWireConnections, setWireToStorage\n} from \"../../store/slices/wireSlice\";\nimport usePrevious from \"../../hooks/usePrevious\";\nimport toHex from \"../../utils/toHex\";\n\nexport default function Wire({points, id}) {\n    const wire = useSelector(state => state.wireReducer.wires.find(wire => wire.id === id));\n    const wires = useSelector(state => state.wireReducer.wires);\n    const activePath = useSelector(state => state.wireReducer.activePath);\n    const activeConnection = useSelector(state => state.wireReducer.activeConnection);\n    const payload = useSelector(state => state.wireReducer.wires.find(wire => +wire.id === +id)?.payload);\n    const wireConnections = useSelector(state => state.wireReducer.wireConnections);\n    const wireFromBlock = useSelector(state => state.blockReducer.blocks.find(block => block.connections.find(connection => connection.id === wire?.connections[0])));\n    const wireToBlock = useSelector(state => state.blockReducer.blocks.find(block => block.connections.find(connection => connection.id === wire?.connections[1])));\n    const wireFromWire = useSelector(state => state.wireReducer.wires.find(storageWire => {\n        return wire?.connections[0].split('.')[1] === storageWire.id;\n    }));\n    const wireToWire = useSelector(state => state.wireReducer.wires.find(storageWire => {\n        return wire?.connections[1].split('.')[1] === storageWire.id;\n    }));\n    const globalState = useSelector(state => state.globalStateReducer.globalState);\n    const dispatch = useDispatch();\n\n\n    const prevWireFromWireValue = usePrevious(wireFromWire);\n\n    let [text, setText] = useState({\n        x: null,\n        y: null,\n        content: null,\n    });\n\n    useEffect(() => {\n        const x = points[0] + (points[2] - points[0]) / 2;\n        const y = points[1] + (points[3] - points[1]) / 2;\n\n        setText({\n            x: isNaN(x) ? 0 : x,\n            y: isNaN(y) ? 0 : y,\n            content: toHex(payload)\n        });\n    }, [points, payload]);\n\n    useEffect(() => {\n        return () => {\n            if (wire) {\n                dispatch(deleteWireConnections({ wireId: wire.id}));\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!wire) {\n            return;\n        }\n\n        let currentWireConnections = wireConnections.filter(wireConnection => +wireConnection.wireId === +wire.id);\n\n        currentWireConnections.forEach(wireConnection => {\n            const needsToMoveConnection = wireConnection.connectionIndex === 0 || wireConnection.connectionIndex === wire.path.length - 4;\n            if (needsToMoveConnection) {\n                const wirePath = wire.path;\n\n                let newX;\n                let newY;\n\n                if (wireConnection.connectionIndex === 0) {\n                    newX = wirePath[0] + (wirePath[2] - wirePath[0]) * wireConnection.firstPartToLengthRatio;\n                    newY = wirePath[1] + (wirePath[3] - wirePath[1]) * wireConnection.firstPartToLengthRatio;\n                } else if (wireConnection.connectionIndex === wire.path.length - 4) {\n                    newX =\n                        wirePath[wire.path.length - 4] +\n                        (wirePath[wire.path.length - 2] - wirePath[wire.path.length - 4]) * wireConnection.firstPartToLengthRatio;\n\n                    newY =\n                        wirePath[wire.path.length - 3] +\n                        (wirePath[wire.path.length - 1] - wirePath[wire.path.length - 3]) * wireConnection.firstPartToLengthRatio;\n                }\n\n                dispatch(changeWireConnectionPosition({\n                    id: wireConnection.id,\n                    x: newX,\n                    y: newY,\n                }));\n\n\n                wires.forEach(wire => {\n                    if (wire.connections[0] === wireConnection.id) {\n                        dispatch(updateWirePath({\n                            wireId: wire.id,\n                            path: [newX, newY, ...wire.path.slice(2)],\n                        }));\n                    }\n                })\n            }\n        });\n    }, [wire]);\n\n    useEffect(() => {\n        if (!wireFromBlock && !wireFromWire) {\n            if (!wireFromWire && prevWireFromWireValue) {\n                dispatch(deleteWire({ wireId: id }));\n            }\n            return;\n        }\n\n        if (!wireToBlock && !wireToWire) {\n            dispatch(deleteWire({ wireId: id }));\n            return;\n        }\n\n        let wireStartCoords;\n\n        const isFromWire = wire.connections[0].includes('wire');\n        if (!isFromWire) {\n            const wireFromBlockConnection = wireFromBlock.connections.find(connection => connection.id === wire.connections[0]);\n\n            wireStartCoords = [\n                wireFromBlockConnection.position.x + wireFromBlock.position.x + BLOCK_CONNECTION_SIZE / 2,\n                wireFromBlockConnection.position.y + wireFromBlock.position.y + BLOCK_CONNECTION_SIZE / 2,\n            ];\n        } else {\n            const wireFromWireConnection = wireConnections.find(connection => connection.id === wire.connections[0]);\n            wireStartCoords = [\n                wireFromWireConnection.position.x + BLOCK_CONNECTION_SIZE / 2,\n                wireFromWireConnection.position.y + BLOCK_CONNECTION_SIZE / 2,\n            ];\n        }\n\n        let wireEndCoords;\n        const isToWire = wire.connections[1].includes('wire');\n        if (!isToWire) {\n            const wireToBlockConnection = wireToBlock.connections.find(connection => connection.id === wire.connections[1]);\n\n            wireEndCoords = [\n                wireToBlockConnection.position.x + wireToBlock.position.x + BLOCK_CONNECTION_SIZE / 2,\n                wireToBlockConnection.position.y + wireToBlock.position.y + BLOCK_CONNECTION_SIZE / 2,\n            ];\n        } else {\n            const wireToWireConnection = wireConnections.find(connection => connection.id === wire.connections[1]);\n            wireEndCoords = [\n                wireToWireConnection.position.x + BLOCK_CONNECTION_SIZE / 2,\n                wireToWireConnection.position.y + BLOCK_CONNECTION_SIZE / 2,\n            ];\n        }\n\n        dispatch(updateWirePath({\n            wireId: wire.id,\n            path: [...wireStartCoords, ...wire.path.slice(2, -2), ...wireEndCoords],\n        }));\n    }, [wireFromBlock, wireFromWire, wireToBlock, wireToWire]);\n\n    const handleWireClick = event => {\n        const position = event.target.getLayer().getRelativePointerPosition();\n        if (globalState === STATES.DELETING || !wire) {\n            return;\n        }\n        event.cancelBubble = true;\n\n        const connectionId = `wire.${id}.` + (wireConnections.length ? wireConnections.length + 1 : 0);\n\n        const x = position.x;\n        const y = position.y;\n\n        let connectionIndex;\n        let firstPartToLengthRatio;\n\n        for (let i = 0; i <= wire.path.length - 4; i += 2) {\n            const firstPoint = [wire.path[i], wire.path[i + 1]];\n            const secondPoint = [wire.path[i + 2], wire.path[i + 3]];\n\n            const A = firstPoint[1] - secondPoint[1];\n            const B = secondPoint[0] - firstPoint[0];\n            const C = firstPoint[0] * secondPoint[1] - secondPoint[0] * firstPoint[1];\n            const distanceToWire = Math.abs(A * x + B * y + C) / (Math.sqrt(A * A + B * B));\n\n            if (distanceToWire < 2) {\n                connectionIndex = i;\n                const wireLength = Math.sqrt(Math.pow(wire.path[i + 2] - wire.path[i], 2) + Math.pow(wire.path[i + 3] - wire.path[i + 1], 2));\n                const wireStartToConnectionLength =\n                    Math.sqrt(Math.pow(x - wire.path[i], 2) + Math.pow(y - wire.path[i + 1], 2));\n\n                firstPartToLengthRatio = wireStartToConnectionLength / wireLength;\n            }\n        }\n\n        const wireConnection = {\n            position: {\n                x: x,\n                y: y,\n            },\n            id: connectionId,\n            wireId: id,\n            connectionIndex: connectionIndex,\n            firstPartToLengthRatio: firstPartToLengthRatio\n        };\n\n        dispatch(createWireConnection(wireConnection));\n\n        if (!activePath) {\n            dispatch(startWire({ connection: wireConnection }));\n        } else {\n            dispatch(setWireToStorage({\n                firstConnection: activeConnection,\n                secondConnection: wireConnection,\n            }));\n        }\n    }\n\n    return (\n        <Group\n            onClick={handleWireClick}\n            onMouseEnter={e => {\n                if (globalState === STATES.DELETING) {\n                    return;\n                }\n                const container = e.target.getStage().container();\n                container.style.cursor = \"pointer\";\n            }}\n            onMouseLeave={e => {\n                const container = e.target.getStage().container();\n\n                if (globalState === STATES.DELETING) {\n                    container.style.cursor = \"crosshair\";\n                } else {\n                    container.style.cursor = \"default\";\n                }\n            }}\n        >\n            <Line\n                points={points}\n                stroke='black'\n                strokeWidth={3}\n                lineCap='round'\n                lineJoin='round'\n            />\n            { wire && wire.prevPayload !== undefined && wire.payload !== wire.prevPayload &&\n                <Ellipse\n                    x={text.x + 5 + (text.content?.length*3 ?? 0)}\n                    y={text.y + 10}\n                    width={30 + (text.content?.length ?? 0)*12}\n                    height={20 + (text.content?.length ?? 0)}\n                    strokeWidth={2}\n                    opacity={0.9}\n                    stroke='blue'\n                />\n            }\n            <Text\n                x={text.x}\n                y={text.y}\n                text={text.content}\n                fontSize={22}\n                fontFamily='Calibri'\n                fill='red'\n            />\n        </Group>\n    );\n}","import {useEffect, useRef} from \"react\";\n\nexport default function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    }, [value]);\n    return ref.current;\n}","import {useDispatch, useSelector} from \"react-redux\";\nimport {useEffect} from \"react\";\nimport { setWiresPrevValue } from \"../../../store/slices/wireSlice\";\n\nexport default function BeforeRisingEdge({ clk }) {\n    const clkFromStorage = useSelector(state => state.clkReducer.clk);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (clk === 1 && clkFromStorage === 0) {\n            dispatch(setWiresPrevValue());\n        }\n    }, [clk])\n\n    return null;\n}","import {Line, Group, Text, Rect, Layer, Stage} from 'react-konva';\nimport { useEffect, useState } from \"react\";\nimport { setClk as setClkToStorage, setClkState, incrementClkPosition } from \"../../../store/slices/clkSlice\";\nimport { resetUpdatedOnCurrentEdgeCount, setZtoNonTouchedWires } from '../../../store/slices/wireSlice';\nimport { resetSignalTouch } from '../../../store/slices/blockSlice';\nimport {Provider, useDispatch, useSelector, ReactReduxContext} from \"react-redux\";\nimport BeforeRisingEdge  from './BeforeRisingEdge';\nimport { STOP_CLK_STATE, RESET_CLK_STATE } from \"../../../globals/clkStates\";\nimport { CLK_PANEL_WIDTH, CLK_PANEL_HEIGHT} from \"../../../globals/globals\";\n\nconst CLK_PERIOD = 4000;\n\nexport default function ClkPanel() {\n    const dispatch = useDispatch();\n    const clkState = useSelector(state => state.clkReducer.clkState);\n    const [linePoints, setLinePoints] = useState([50, 50]);\n    const [drawCounter, setDrawCounter] = useState(1);\n    const [clk, setClk] = useState(0);\n    const clkFromStorage = useSelector(state => state.clkReducer.clk);\n\n    useEffect(() => {\n        if (clkState === RESET_CLK_STATE) {\n            setLinePoints([50, 50]);\n            setDrawCounter(1);\n            dispatch(setClkState(STOP_CLK_STATE));\n        }\n    }, [clkState]);\n\n    useEffect(() => {\n        const clkDrawInterval = setInterval(() => {\n            if (clkState === STOP_CLK_STATE) {\n                return;\n            }\n\n            setLinePoints(linePoints => {\n                const lastPointX = linePoints[linePoints.length - 2];\n                const lastPointY = linePoints[linePoints.length - 1];\n\n                const horizontalLinePoint = [lastPointX + 20, lastPointY];\n                const risingLinePoint = [lastPointX, lastPointY - 20];\n                const fallingLinePoint = [lastPointX, lastPointY + 20];\n\n                if (drawCounter === 2) {\n                   setTimeout(() => {\n                       dispatch(setZtoNonTouchedWires());\n                       dispatch(resetUpdatedOnCurrentEdgeCount());\n                       dispatch(resetSignalTouch());\n                   }, 100);\n                }\n\n\n                if ([2, 3].includes(drawCounter)) {\n                    setClk(1);\n                }\n                if ([1, 4].includes(drawCounter)) {\n                    setClk(0);\n                }\n\n                const counterPointMap = {\n                    1: horizontalLinePoint,\n                    2: risingLinePoint,\n                    3: horizontalLinePoint,\n                    4: fallingLinePoint,\n                }\n\n                if (linePoints[linePoints.length - 2] > window.innerWidth) {\n                    setDrawCounter(1);\n                    dispatch(incrementClkPosition());\n                    return [50, 50];\n                }\n\n                return [...linePoints, ...counterPointMap[drawCounter]];\n            });\n\n            setDrawCounter(counter => counter === 4 ? 1 : counter + 1);\n            dispatch(incrementClkPosition());\n        }, CLK_PERIOD / 4)\n\n        return () => {\n            clearInterval(clkDrawInterval);\n        };\n    }, [clkState, drawCounter]);\n\n    useEffect(() => {\n        dispatch(setClkToStorage(clk));\n    }, [clk]);\n\n    return (\n        <ReactReduxContext.Consumer>\n            {({ store }) => (\n                <Stage\n                    width={CLK_PANEL_WIDTH}\n                    height={CLK_PANEL_HEIGHT}\n                >\n                    <Provider store={store}>\n                        <Layer>\n                            <Group\n                                strokeWidth={1} // border width\n                                stroke=\"red\" // border color\n                            >\n                                <Rect\n                                    x={0}\n                                    y={0}\n                                    width={window.innerWidth}\n                                    height={70}\n                                    stroke='black'\n                                    strokeWidth={3}\n                                    fill={'transparent'}\n                                />\n                                <Line\n                                    points={linePoints}\n                                    stroke='black'\n                                    strokeWidth={3}\n                                    lineCap='round'\n                                    lineJoin='round'\n                                    id='clk'\n                                />\n                                <Text\n                                    x={15}\n                                    y={35}\n                                    text='Clk'\n                                    fontSize={16}\n                                    fontFamily='Calibri'\n                                    fill='black'\n                                />\n                                <BeforeRisingEdge clk={clk}/>\n                            </Group>\n                        </Layer>\n                    </Provider>\n                </Stage>\n            )}\n        </ReactReduxContext.Consumer>\n    );\n}","import { Group, Rect } from 'react-konva';\nimport { useSelector } from \"react-redux\";\n\nimport { STATES } from \"../../globals/globalStates\";\nimport { WIRE_CONNECTION_SIZE } from '../../globals/globals';\n\nexport default function WireConnection({x, y}) {\n    const globalState = useSelector(state => state.globalStateReducer.globalState);\n\n    return (\n        <Group\n            onMouseEnter={e => {\n                const container = e.target.getStage().container();\n                container.style.cursor = \"pointer\";\n            }}\n            onMouseLeave={e => {\n                const container = e.target.getStage().container();\n\n                if (globalState === STATES.DELETING) {\n                    container.style.cursor = \"crosshair\";\n                } else {\n                    container.style.cursor = \"default\";\n                }\n            }}\n        >\n            <Rect\n                x={x}\n                y={y}\n                width={WIRE_CONNECTION_SIZE}\n                height={WIRE_CONNECTION_SIZE}\n                fill={'yellow'}\n                shadowBlur={5}\n            />\n        </Group>\n    );\n}","import { Group, Rect, Text } from 'react-konva';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { startWire, resetWire, setWireToStorage } from \"../../store/slices/wireSlice\";\nimport { useState } from \"react\";\n\nimport { STATES} from \"../../globals/globalStates\";\nimport { BLOCK_CONNECTION_SIZE } from '../../globals/globals';\n\nexport default function BlockConnection({id, x, y, name, input, connectedTo, connectedToType, blockId}) {\n    const dispatch = useDispatch();\n    const activeConnection = useSelector(state => state.wireReducer.activeConnection);\n    const block = useSelector(state => state.blockReducer.blocks.find(block => block.id === blockId));\n    const globalState = useSelector(state => state.globalStateReducer.globalState);\n\n    const [connection, setConnection] = useState({\n        id,\n        name,\n        position: {\n            x: x,\n            y: y,\n        },\n        connectedTo,\n        connectedToType,\n        input,\n        blockId\n    });\n\n    const handleClick = event => {\n        event.cancelBubble = true;\n\n        if (connectedTo) {\n            dispatch(resetWire());\n            return;\n        }\n\n        if (activeConnection === null) {\n            let connectionWithAbsoluteCoords = connection;\n\n            setConnection(connectionWithAbsoluteCoords);\n            dispatch(startWire({\n                connection: connection.id,\n                block\n            }));\n            return;\n        }\n\n        if (activeConnection.id !== connection.id) {\n            dispatch(setWireToStorage({\n                firstConnection: activeConnection,\n                secondConnection: connection.id,\n                secondBlock: block,\n            }));\n        }\n    }\n\n    return (\n        <Group\n            onMouseEnter={e => {\n                const container = e.target.getStage().container();\n                container.style.cursor = \"pointer\";\n            }}\n            onMouseLeave={e => {\n                const container = e.target.getStage().container();\n\n                if (globalState === STATES.DELETING) {\n                    container.style.cursor = \"crosshair\";\n                } else {\n                    container.style.cursor = \"default\";\n                }\n            }}\n        >\n            <Rect\n                onClick={handleClick}\n                x={x}\n                y={y}\n                width={BLOCK_CONNECTION_SIZE}\n                height={BLOCK_CONNECTION_SIZE}\n                fill={'yellow'}\n                shadowBlur={5}\n            />\n            <Text\n                x={input ? x - name.length * 5 - 10 : x + 20}\n                y={y + 10}\n                text={name}\n                fontSize={16}\n                fontFamily='Calibri'\n                fill='black'\n            />\n        </Group>\n    );\n}","import {useRef, Fragment, useState, useEffect} from \"react\";\nimport { Rect, Group } from 'react-konva';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {changeBlockPosition, setBlockToStorage, setSelectedBlockId} from \"../../store/slices/blockSlice\";\n\nimport BlockConnection from \"./BlockConnection\";\nimport useThrottle from \"../../hooks/useThrottle\";\nimport { FIELD_WIDTH, FIELD_HEIGHT, BLOCK_SIZES } from \"../../globals/globals\";\n\nexport default function Block({id, x, y, width, height, connections, slot, color}) {\n    const dispatch = useDispatch();\n    const activeConnection = useSelector(state => state.wireReducer.activeConnection);\n    const selectedBlockId = useSelector(state => state.blockReducer.selectedBlockId);\n    const block = useSelector(state => state.blockReducer.blocks.find(block => block.id === id));\n\n    let [isActive, setIsActive] = useState(false);\n\n    const blockRef = useRef();\n\n    useEffect(() => {\n        if (selectedBlockId === id) {\n            setIsActive(true);\n        } else {\n            setIsActive(false);\n        }\n    }, [selectedBlockId]);\n\n    const setBlockToStorage = useThrottle((newCoordinates) => {\n        dispatch(changeBlockPosition({blockId: id, position: newCoordinates}));\n    }, 100);\n\n    const moveBlock = () => {\n        if (activeConnection) {\n            blockRef.current.stopDrag();\n            return;\n        }\n\n\n        const newCoordinates = blockRef.current.children[0].getAbsolutePosition();\n\n        if (newCoordinates.x < 0) {\n            newCoordinates.x = 0;\n            blockRef.current.setAbsolutePosition({\n                x: 0,\n                y: newCoordinates.y,\n            });\n        }\n\n        if (newCoordinates.x + BLOCK_SIZES[block.type].width > FIELD_WIDTH) {\n            newCoordinates.x = FIELD_WIDTH;\n            blockRef.current.setAbsolutePosition({\n                x: FIELD_WIDTH - BLOCK_SIZES[block.type].width,\n                y: newCoordinates.y,\n            });\n        }\n\n        if (newCoordinates.y < 0) {\n            newCoordinates.y = 0;\n            blockRef.current.setAbsolutePosition({\n                x: newCoordinates.x,\n                y: 0,\n            });\n        }\n        if (newCoordinates.y + BLOCK_SIZES[block.type].height > FIELD_HEIGHT) {\n            newCoordinates.y = FIELD_HEIGHT;\n            blockRef.current.setAbsolutePosition({\n                x: newCoordinates.x,\n                y: FIELD_HEIGHT - BLOCK_SIZES[block.type].height,\n            });\n        }\n\n        setBlockToStorage(newCoordinates);\n    }\n\n    const handleBlockClick = () => {\n        if (isActive) {\n            dispatch(setSelectedBlockId({ blockId: null }));\n        } else {\n            dispatch(setSelectedBlockId({ blockId: id }));\n        }\n    };\n\n    return ( // onDragMove={useThrottle(moveBlock, 70)}\n        <Group x={x} y={y} draggable ref={blockRef} onDragMove={moveBlock} onClick={handleBlockClick}>\n            <Fragment>\n                <Rect\n                    x={0}\n                    y={0}\n                    width={width} //50\n                    height={height} //50\n                    fill={color}\n                    shadowBlur={5}\n\n                    strokeWidth={isActive ? 3 : 0} // border width\n                    stroke=\"black\"\n\n                    id={id}\n                />\n                { slot }\n                {\n                    connections.map(connection => {\n                        return <BlockConnection\n                            id={connection.id}\n                            key={connection.id}\n                            name={connection.name}\n                            x={connection.position.x}\n                            y={connection.position.y}\n                            connectedTo={connection.connectedTo}\n                            blockId={connection.blockId}\n                            input={connection.type === 'in'}\n                        />\n                    })\n                }\n            </Fragment>\n        </Group>\n    );\n}","import { useRef, useEffect, useCallback } from 'react';\nimport { throttle } from 'lodash';\n\nexport default function useThrottle(cb, delay) {\n    const options = { leading: true, trailing: true }; // add custom lodash options\n    const cbRef = useRef(cb);\n    // use mutable ref to make useCallback/throttle not depend on `cb` dep\n    useEffect(() => { cbRef.current = cb; });\n    return useCallback(\n        throttle((...args) => cbRef.current(...args), delay, options),\n        [delay]\n    );\n}","import {Group, Rect, Text} from \"react-konva\";\nimport {REGISTER_BLOCK_WIDTH, REGISTER_BLOCK_HEIGHT} from \"../../../../globals/globals\";\n\nexport default function StateDisplayRectangle({ state }) {\n  const size = 50;\n\n  return (\n    <Group x={REGISTER_BLOCK_WIDTH / 2 - size / 2} y={REGISTER_BLOCK_HEIGHT / 2 - size / 2}>\n      <Rect\n        x={0}\n        y={0}\n        width={size}\n        height={size}\n        fill={'white'}\n        shadowBlur={5}\n      />\n      <Text\n        x={0}\n        y={0}\n        text={state}\n        fontSize={22}\n        fontFamily='Calibri'\n        fill='black'\n      />\n    </Group>\n  );\n}\n","import { BLOCK_CONNECTION_SIZE, REGISTER_BLOCK_WIDTH, REGISTER_BLOCK_HEIGHT } from '../../../../globals/globals';\n\nexport default function (id) {\n  let inputConnections = [\n    {\n      id: id + '.d',\n      name: 'd',\n      connectedTo: null,\n      connectedToType: null,\n      type: 'in',\n      blockId: id,\n    },\n    {\n      id: id + '.en',\n      name: 'en',\n      connectedTo: null,\n      connectedToType: null,\n      type: 'in',\n      blockId: id,\n    },\n  {\n      id: id + '.oEn',\n      name: 'oEn',\n      connectedTo: null,\n      connectedToType: null,\n      type: 'in',\n      blockId: id,\n  },\n  ];\n  let outputConnections = [\n    {\n      id: id + '.q',\n      name: 'q',\n      connectedTo: null,\n      connectedToType: null,\n      type: 'out',\n      blockId: id,\n    },\n  ];\n\n  const inputConnectionsYOffset = REGISTER_BLOCK_HEIGHT / (inputConnections.length + 1);\n  const outputConnectionsYOffset = REGISTER_BLOCK_HEIGHT / (outputConnections.length + 1);\n\n  inputConnections = inputConnections.map((connection, index) => {\n    connection.position = {\n      x: 0,\n      y: (index + 1) * inputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n    };\n    return connection\n  });\n\n  outputConnections = outputConnections.map((connection, index) => {\n    connection.position = {\n      x: REGISTER_BLOCK_WIDTH - BLOCK_CONNECTION_SIZE,\n      y: (index + 1) * outputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n    };\n    return connection;\n  });\n\n  return [\n    ...inputConnections,\n    ...outputConnections,\n  ]\n};","import Block from \"../../Block\";\nimport StateDisplayRectangle from \"./StateDisplayRectangle\";\n\nimport {REGISTER_BLOCK_WIDTH, REGISTER_BLOCK_HEIGHT, REGISTER_BLOCK_COLOR} from \"../../../../globals/globals\";\nimport getConnections from './connections';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {Fragment, useEffect, useRef, useState} from \"react\";\nimport {updateWirePayload} from \"../../../../store/slices/wireSlice\";\nimport { changeBlockPayload } from \"../../../../store/slices/blockSlice\";\nimport {Text} from \"react-konva\";\nimport toHex from '../../../../utils/toHex';\n\nexport default function Register({id, x, y, name}) {\n    const dispatch = useDispatch();\n    const clk = useSelector(state => state.clkReducer.clk);\n    const block = useSelector(state => state.blockReducer.blocks.find(block => block.id === id));\n    const connections = getConnections(id);\n    const wires = useSelector(state => state.wireReducer.wires.filter(wire => {\n            return wire.connections.find(connection => {\n                return connection.split('.')[0] === id\n            });\n        })\n    );\n    const wiresRef = useRef([]);\n\n    const [state, setState] = useState(0);\n\n    useEffect(() => {\n        wiresRef.current = wires;\n    }, [wires]);\n\n    useEffect(() => {\n        changeBlockPayload({\n            blockId: id,\n            payload: state,\n        });\n    }, [state]);\n\n    useEffect(() => {\n        setState(block.payload);\n    }, [block]);\n\n    useEffect(() => {\n        if (clk === 1) {\n            const dWire = wires.find(wire => wire.connections.find(connection => connection === `${id}.d`));\n            const qWire = wires.find(wire => wire.connections.find(connection => connection === `${id}.q`));\n            const enWire = wires.find(wire => wire.connections.find(connection => connection === `${id}.en`));\n            const oEnWire = wires.find(wire => wire.connections.find(connection => connection === `${id}.oEn`));\n\n            const isOenWireStable = oEnWire && oEnWire.payload === 1 && oEnWire.prevPayload === 1;\n\n            if (qWire) {\n                if (!oEnWire) {\n                    dispatch(updateWirePayload({\n                        id: qWire.id,\n                        payload: state,\n                    }));\n                } else if (isOenWireStable) {\n                    dispatch(updateWirePayload({\n                        id: qWire.id,\n                        payload: state,\n                    }));\n                }\n            }\n\n            const isEnWireStable = enWire && enWire.payload === 1 && enWire.prevPayload === 1;\n\n            if (isEnWireStable && dWire) {\n                if (dWire.payload !== 'z') {\n                    setState(dWire.payload);\n                }\n            }\n        }\n    }, [clk]);\n\n    const slot = (\n      <Fragment>\n          <StateDisplayRectangle state={toHex(state)} />\n          <Text\n              x={0}\n              y={0}\n              text={name}\n              fontSize={22}\n              fontFamily='Calibri'\n              fill='black'\n          />\n      </Fragment>\n    );\n\n    return (\n        <Block\n            id={id}\n            x={x}\n            y={y}\n            width={REGISTER_BLOCK_WIDTH}\n            height={REGISTER_BLOCK_HEIGHT}\n            connections={connections}\n            slot={slot}\n            color={REGISTER_BLOCK_COLOR}\n        />\n    );\n}\n","import { BLOCK_CONNECTION_SIZE, INC_BLOCK_WIDTH, INC_BLOCK_HEIGHT } from '../../../../globals/globals';\n\nexport default function (id) {\n    let inputConnections = [\n        {\n            id: id + '.in',\n            name: 'in',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'in',\n            blockId: id,\n        },\n    ];\n    let outputConnections = [\n        {\n            id: id + '.out',\n            name: 'out',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'out',\n            blockId: id,\n        },\n    ];\n\n    const inputConnectionsYOffset = INC_BLOCK_HEIGHT / (inputConnections.length + 1);\n    const outputConnectionsYOffset = INC_BLOCK_HEIGHT / (outputConnections.length + 1);\n\n    inputConnections = inputConnections.map((connection, index) => {\n        connection.position = {\n            x: 0,\n            y: (index + 1) * inputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n        };\n        return connection\n    });\n\n    outputConnections = outputConnections.map((connection, index) => {\n        connection.position = {\n            x: INC_BLOCK_WIDTH - BLOCK_CONNECTION_SIZE,\n            y: (index + 1) * outputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n        };\n        return connection;\n    });\n\n    return [\n        ...inputConnections,\n        ...outputConnections,\n    ]\n};","import Block from \"../../Block\";\n\nimport {INC_BLOCK_WIDTH, INC_BLOCK_HEIGHT, INC_BLOCK_COLOR} from \"../../../../globals/globals\";\nimport getConnections from './connections';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {useEffect} from \"react\";\nimport {updateWirePayload} from \"../../../../store/slices/wireSlice\";\nimport {Text} from \"react-konva\";\n\nexport default function InstructionRegister({id, x, y, name}) {\n    const dispatch = useDispatch();\n\n    const clk = useSelector(state => state.clkReducer.clk);\n    const wires = useSelector(state => state.wireReducer.wires.filter(wire => {\n            return wire.connections.find(connection => connection.split('.')[0] === id);\n        })\n    );\n\n    const connections = getConnections(id);\n\n    useEffect(() => {\n        if (clk === 1) {\n            const inWire = wires.find(wire => wire.connections.find(connection => connection === `${id}.in`));\n            const outWire = wires.find(wire => wire.connections.find(connection => connection === `${id}.out`));\n\n            if (!outWire || !inWire) {\n                return;\n            }\n\n            if (inWire.payload === 'z') {\n                return\n            }\n\n            dispatch(updateWirePayload({\n                id: outWire.id,\n                payload: inWire.payload + 1,\n            }));\n        }\n    }, [clk]);\n\n\n    const slot = (\n        <Text\n            x={0}\n            y={0}\n            text={name}\n            fontSize={22}\n            fontFamily='Calibri'\n            fill='black'\n        />\n    );\n\n    return (\n        <Block\n            id={id}\n            x={x}\n            y={y}\n            width={INC_BLOCK_WIDTH}\n            height={INC_BLOCK_HEIGHT}\n            connections={connections}\n            slot={slot}\n            color={INC_BLOCK_COLOR}\n        />\n    );\n}\n","import { BLOCK_CONNECTION_SIZE, LOGIC_ONE_BLOCK_WIDTH, LOGIC_ONE_BLOCK_HEIGHT } from '../../../../globals/globals';\n\nexport default function (id) {\n    let outputConnections = [\n        {\n            id: id + '.q',\n            name: 'q',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'out',\n            blockId: id,\n        },\n    ];\n\n    const outputConnectionsYOffset = LOGIC_ONE_BLOCK_HEIGHT / (outputConnections.length + 1);\n\n    outputConnections = outputConnections.map((connection, index) => {\n        connection.position = {\n            x: LOGIC_ONE_BLOCK_WIDTH - BLOCK_CONNECTION_SIZE,\n            y: (index + 1) * outputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n        };\n        return connection;\n    });\n\n    return [\n        ...outputConnections,\n    ]\n};","import Block from \"../../Block\";\n\nimport {LOGIC_ONE_BLOCK_WIDTH, LOGIC_ONE_BLOCK_HEIGHT, LOGIC_ONE_BLOCK_COLOR} from \"../../../../globals/globals\";\nimport getConnections from './connections';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {Fragment, useEffect} from \"react\";\nimport {updateWirePayload} from \"../../../../store/slices/wireSlice\";\nimport {Text} from \"react-konva\";\n\nexport default function LogicOne({id, x, y, name}) {\n    const dispatch = useDispatch();\n    const clk = useSelector(state => state.clkReducer.clk);\n    const wires = useSelector(state => state.wireReducer.wires.filter(wire => {\n            return wire.connections.find(connection => connection.split('.')[0] === id);\n        })\n    );\n\n    const connections = getConnections(id);\n\n\n    useEffect(() => {\n        if (clk === 1) {\n            const qWire = wires.find(wire => wire.connections.find(connection => connection === `${id}.q`));\n            if (qWire) {\n                dispatch(updateWirePayload({\n                    id: qWire.id,\n                    payload: 1,\n                }));\n            }\n        }\n    }, [clk]);\n\n    const slot = (\n        <Fragment>\n            <Text\n                x={0}\n                y={0}\n                text={name}\n                fontSize={22}\n                fontFamily='Calibri'\n                fill='black'\n            />\n        </Fragment>\n    );\n\n    return (\n        <Block\n            id={id}\n            x={x}\n            y={y}\n            width={LOGIC_ONE_BLOCK_WIDTH}\n            height={LOGIC_ONE_BLOCK_HEIGHT}\n            connections={connections}\n            slot={slot}\n            color={LOGIC_ONE_BLOCK_COLOR}\n        />\n    );\n}\n","import { BLOCK_CONNECTION_SIZE, LOGIC_ONE_BLOCK_WIDTH, LOGIC_ONE_BLOCK_HEIGHT } from '../../../../globals/globals';\n\nexport default function (id) {\n    let outputConnections = [\n        {\n            id: id + '.q',\n            name: 'q',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'out',\n            blockId: id,\n        },\n    ];\n\n    const outputConnectionsYOffset = LOGIC_ONE_BLOCK_HEIGHT / (outputConnections.length + 1);\n\n    outputConnections = outputConnections.map((connection, index) => {\n        connection.position = {\n            x: LOGIC_ONE_BLOCK_WIDTH - BLOCK_CONNECTION_SIZE,\n            y: (index + 1) * outputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n        };\n        return connection;\n    });\n\n    return [\n        ...outputConnections,\n    ]\n};","import Block from \"../../Block\";\n\nimport {LOGIC_ZERO_BLOCK_WIDTH, LOGIC_ZERO_BLOCK_HEIGHT, LOGIC_ZERO_BLOCK_COLOR} from \"../../../../globals/globals\";\nimport getConnections from './connections';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {Fragment, useEffect} from \"react\";\nimport {updateWirePayload} from \"../../../../store/slices/wireSlice\";\nimport {Text} from \"react-konva\";\n\nexport default function LogicZero({id, x, y, name}) {\n    const dispatch = useDispatch();\n    const clk = useSelector(state => state.clkReducer.clk);\n    const wires = useSelector(state => state.wireReducer.wires.filter(wire => {\n            return wire.connections.find(connection => connection.split('.')[0] === id);\n        })\n    );\n\n    const connections = getConnections(id);\n\n\n    useEffect(() => {\n        if (clk === 1) {\n            const qWire = wires.find(wire => wire.connections.find(connection => connection === `${id}.q`));\n            if (qWire) {\n                dispatch(updateWirePayload({\n                    id: qWire.id,\n                    payload: 0,\n                }));\n            }\n        }\n    }, [clk]);\n\n    const slot = (\n        <Fragment>\n            <Text\n                x={0}\n                y={0}\n                text={name}\n                fontSize={22}\n                fontFamily='Calibri'\n                fill='black'\n            />\n        </Fragment>\n    );\n\n    return (\n        <Block\n            id={id}\n            x={x}\n            y={y}\n            width={LOGIC_ZERO_BLOCK_WIDTH}\n            height={LOGIC_ZERO_BLOCK_HEIGHT}\n            connections={connections}\n            slot={slot}\n            color={LOGIC_ZERO_BLOCK_COLOR}\n        />\n    );\n}\n","import { BLOCK_CONNECTION_SIZE, ROM_BLOCK_WIDTH, ROM_BLOCK_HEIGHT } from '../../../../globals/globals';\n\nexport default function (id) {\n    let inputConnections = [\n        {\n            id: id + '.inc',\n            name: 'inc',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'in',\n            blockId: id,\n        },\n        {\n            id: id + '.en',\n            name: 'en',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'in',\n            blockId: id,\n        },\n    ];\n    let outputConnections = [\n        {\n            id: id + '.out',\n            name: 'out',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'out',\n            blockId: id,\n        },\n    ];\n\n    const inputConnectionsYOffset = ROM_BLOCK_HEIGHT / (inputConnections.length + 1);\n    const outputConnectionsYOffset = ROM_BLOCK_HEIGHT / (outputConnections.length + 1);\n\n    inputConnections = inputConnections.map((connection, index) => {\n        connection.position = {\n            x: 0,\n            y: (index + 1) * inputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n        };\n        return connection\n    });\n\n    outputConnections = outputConnections.map((connection, index) => {\n        connection.position = {\n            x: ROM_BLOCK_WIDTH - BLOCK_CONNECTION_SIZE,\n            y: (index + 1) * outputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n        };\n        return connection;\n    });\n\n    return [\n        ...inputConnections,\n        ...outputConnections,\n    ]\n};","export default function fromHex(hexString) {\n    if (isNaN(parseInt(hexString, 16)) || hexString === '') {\n        return '';\n    }\n    return parseInt(hexString, 16);\n}","import Block from \"../../Block\";\nimport {ROM_BLOCK_COLOR, ROM_BLOCK_WIDTH, ROM_BLOCK_HEIGHT} from \"../../../../globals/globals\";\nimport getConnections from \"./connections\";\nimport {Fragment, useEffect, useRef} from \"react\";\nimport { Html } from 'react-konva-utils';\nimport {Text} from \"react-konva\";\nimport { fill } from 'lodash';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {updateWirePayload} from \"../../../../store/slices/wireSlice\";\nimport {changeBlockPayload} from \"../../../../store/slices/blockSlice\";\nimport toHex from \"../../../../utils/toHex\";\nimport fromHex from \"../../../../utils/fromHex\";\n\nexport default function Rom({id, x, y, name}) {\n    const initialRomData = fill(Array(100), '0');\n\n    const dispatch = useDispatch();\n    const clk = useSelector(state => state.clkReducer.clk);\n    const block = useSelector(state => state.blockReducer.blocks.find(block => block.id === id));\n    const wires = useSelector(state => state.wireReducer.wires.filter(wire => {\n            return wire.connections.find(connection => {\n                return connection.split('.')[0] === id\n            });\n        })\n    );\n    const wiresRef = useRef([]);\n\n    let executingAddress = block.payload.executingAddress;\n    let activeAddress = block.payload.activeAddress;\n    let romData = block.payload.data;\n\n    useEffect(() => {\n        if (!block.payload) {\n            dispatch(changeBlockPayload({\n                blockId: id,\n                payload: {\n                    executingAddress: 0,\n                    activeAddress: 1,\n                    data: initialRomData,\n                },\n            }));\n        }\n    }, []);\n\n    useEffect(() => {\n        wiresRef.current = wires;\n    }, [wires]);\n\n    useEffect(() => {\n        if (clk === 1) {\n            setTimeout(() => {\n                const incWire = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.inc`));\n                const enWire = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.en`));\n                const outWire = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.out`));\n\n                if (!incWire || !enWire || !outWire) {\n                    return;\n                }\n\n\n                const isEnWireStable = enWire.payload === 1 && enWire.prevPayload === 1;\n\n                if (enWire && isEnWireStable) {\n                    dispatch(updateWirePayload({\n                        id: outWire.id,\n                        payload: block.payload.data[executingAddress],\n                    }));\n                }\n\n                const isIncWireStable = incWire.payload === 1 && incWire.prevPayload === 1;\n\n                if (incWire && isIncWireStable) {\n                    dispatch(changeBlockPayload({\n                        blockId: id,\n                        payload: {\n                            executingAddress: executingAddress + 1,\n                        },\n                    }));\n                }\n            }, 0);\n        }\n\n    }, [clk]);\n\n    const handleLineNumberInput = event => {\n        if (isNaN(fromHex(event.target.value))) {\n            dispatch(changeBlockPayload({\n                blockId: id,\n                payload: {\n                    activeAddress: 1,\n                },\n            }));\n        } else {\n            dispatch(changeBlockPayload({\n                blockId: id,\n                payload: {\n                    activeAddress: fromHex(event.target.value),\n                },\n            }));\n        }\n    };\n\n    let slot;\n\n    if (typeof block.payload === 'object') {\n        slot = (\n            <Fragment>\n                <Text\n                    x={70}\n                    y={10}\n                    text={name}\n                    fontSize={22}\n                    fontFamily='Calibri'\n                    fill='black'\n                />\n                <Html divProps={{\n                    style: {\n                        marginTop: '35px',\n                        marginLeft: '20px',\n                    },\n                }}>\n                    <input type={'text'} onInput={handleLineNumberInput} />\n                </Html>\n                <Text\n                    x={50}\n                    y={70}\n                    text={`${toHex(activeAddress - 1)}: ${toHex(romData[activeAddress - 1])}` }\n                    fontSize={22}\n                    fontFamily='Calibri'\n                    fill={executingAddress ===  activeAddress - 1 ? 'red' : 'black'}\n                />\n                <Text\n                    x={50}\n                    y={90}\n                    text={`${toHex(activeAddress)}: ${toHex(romData[activeAddress])}`}\n                    fontSize={22}\n                    fontFamily='Calibri'\n                    fill={executingAddress ===  activeAddress ? 'red' : 'black'}\n                />\n                <Text\n                    x={50}\n                    y={110}\n                    text={`${toHex(activeAddress + 1)}: ${toHex(romData[activeAddress + 1])}`}\n                    fontSize={22}\n                    fontFamily='Calibri'\n                    fill={executingAddress ===  activeAddress + 1 ? 'red' : 'black'}\n                />\n            </Fragment>\n        );\n    }\n\n    return (\n        <Block\n            id={id}\n            x={x}\n            y={y}\n            width={ROM_BLOCK_WIDTH}\n            height={ROM_BLOCK_HEIGHT}\n            connections={getConnections(id)}\n            slot={slot}\n            color={ROM_BLOCK_COLOR}\n        />\n    );\n}","import {BLOCK_CONNECTION_SIZE, RAM_BLOCK_HEIGHT, RAM_BLOCK_WIDTH} from '../../../../globals/globals';\n\nexport default function (id) {\n    let inputConnections = [\n        {\n            id: id + '.addr',\n            name: 'addr',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'in',\n            blockId: id,\n        },\n        {\n            id: id + '.readAddr',\n            name: 'readAddr',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'in',\n            blockId: id,\n        },\n        {\n            id: id + '.en',\n            name: 'en',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'in',\n            blockId: id,\n        },\n        {\n            id: id + '.r/!w',\n            name: 'r/!w',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'in',\n            blockId: id,\n        },\n    ];\n    let outputConnections = [\n        {\n            id: id + '.data',\n            name: 'data',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'inout',\n            blockId: id,\n        },\n    ];\n\n    const inputConnectionsYOffset = RAM_BLOCK_HEIGHT / (inputConnections.length + 1);\n    const outputConnectionsYOffset = RAM_BLOCK_HEIGHT / (outputConnections.length + 1);\n\n    inputConnections = inputConnections.map((connection, index) => {\n        connection.position = {\n            x: 0,\n            y: (index + 1) * inputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n        };\n        return connection\n    });\n\n    outputConnections = outputConnections.map((connection, index) => {\n        connection.position = {\n            x: RAM_BLOCK_WIDTH - BLOCK_CONNECTION_SIZE,\n            y: (index + 1) * outputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n        };\n        return connection;\n    });\n\n    return [\n        ...inputConnections,\n        ...outputConnections,\n    ]\n};","import Block from \"../../Block\";\nimport {RAM_BLOCK_COLOR, RAM_BLOCK_WIDTH, RAM_BLOCK_HEIGHT} from \"../../../../globals/globals\";\nimport getConnections from \"./connections\";\nimport {Fragment, useEffect, useRef} from \"react\";\nimport { Html } from 'react-konva-utils';\nimport {Text} from \"react-konva\";\nimport { fill } from 'lodash';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {updateWirePayload} from \"../../../../store/slices/wireSlice\";\nimport { cloneDeep } from 'lodash';\nimport {changeBlockPayload} from \"../../../../store/slices/blockSlice\";\nimport toHex from \"../../../../utils/toHex\";\nimport fromHex from \"../../../../utils/fromHex\";\n\nexport default function Ram({id, x, y, name}) {\n    const initialRamData = fill(Array(100), '0');\n\n    const dispatch = useDispatch();\n    const clk = useSelector(state => state.clkReducer.clk);\n    const block = useSelector(state => state.blockReducer.blocks.find(block => block.id === id));\n    const wires = useSelector(state => state.wireReducer.wires.filter(wire => {\n            return wire.connections.find(connection => {\n                return connection.split('.')[0] === id\n            });\n        })\n    );\n    const wiresRef = useRef([]);\n\n    let executingAddress = block.payload.executingAddress;\n    let activeAddress = block.payload.activeAddress;\n    let ramData = block.payload.data;\n\n    useEffect(() => {\n        wiresRef.current = wires;\n    }, [wires]);\n\n    useEffect(() => {\n        if (!block.payload) {\n            dispatch(changeBlockPayload({\n                blockId: id,\n                payload: {\n                    executingAddress: 0,\n                    activeAddress: 1,\n                    data: initialRamData,\n                },\n            }));\n        }\n    }, []);\n\n    useEffect(() => {\n        if (clk === 1) {\n            setTimeout(() => {\n                const addr = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.addr`));\n                const readAddr = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.readAddr`));\n                const en = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.en`));\n                const rNw = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.r/!w`));\n                const data = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.data`));\n\n                if (!addr || !readAddr || !en || !rNw || !data) {\n                    return;\n                }\n\n                const isReadAddrStable = readAddr.payload === 1 && readAddr.prevPayload === 1;\n\n                if (isReadAddrStable) {\n                    dispatch(changeBlockPayload({\n                        blockId: id,\n                        payload: {\n                            executingAddress: addr.payload,\n                        },\n                    }));\n                }\n\n                const isEnStable = en.payload === 1 && en.prevPayload === 1;\n                const isRnwStable = (rNw.payload === 1 && rNw.prevPayload === 1) || (rNw.payload === 0 && rNw.prevPayload === 0);\n\n                if (isEnStable) {\n                    if (isRnwStable && rNw.payload === 1) {\n                        dispatch(updateWirePayload({\n                            id: data.id,\n                            payload: ramData[executingAddress],\n                        }));\n                    } else if (isRnwStable && rNw.payload === 0) {\n                        let dataCopy = cloneDeep(ramData);\n                        dataCopy[executingAddress] = data.payload;\n\n                        dispatch(changeBlockPayload({\n                            blockId: id,\n                            payload: {\n                                data: dataCopy,\n                            },\n                        }));\n                    }\n                }\n            }, 0);\n        }\n\n    }, [clk]);\n\n    const handleLineNumberInput = event => {\n        if (isNaN(fromHex(event.target.value))) {\n            dispatch(changeBlockPayload({\n                blockId: id,\n                payload: {\n                    activeAddress: 1,\n                },\n            }));\n        } else {\n            dispatch(changeBlockPayload({\n                blockId: id,\n                payload: {\n                    activeAddress: fromHex(event.target.value),\n                },\n            }));\n        }\n    };\n\n    let slot;\n    if (typeof block.payload === 'object') {\n        slot = (\n            <Fragment>\n                <Text\n                    x={70}\n                    y={10}\n                    text={name}\n                    fontSize={22}\n                    fontFamily='Calibri'\n                    fill='black'\n                />\n                <Html divProps={{\n                    style: {\n                        marginTop: '35px',\n                        marginLeft: '20px',\n                    },\n                }}>\n                    <input type={'text'} onInput={handleLineNumberInput}/>\n                </Html>\n                <Text\n                    x={50}\n                    y={70}\n                    text={`${toHex(activeAddress - 1)}: ${toHex(ramData[activeAddress - 1])}` }\n                    fontSize={22}\n                    fontFamily='Calibri'\n                    fill={executingAddress ===  activeAddress - 1 ? 'red' : 'black'}\n                />\n                <Text\n                    x={50}\n                    y={90}\n                    text={`${toHex(activeAddress)}: ${toHex(ramData[activeAddress])}`}\n                    fontSize={22}\n                    fontFamily='Calibri'\n                    fill={executingAddress ===  activeAddress ? 'red' : 'black'}\n                />\n                <Text\n                    x={50}\n                    y={110}\n                    text={`${toHex(activeAddress + 1)}: ${toHex(ramData[activeAddress + 1])}`}\n                    fontSize={22}\n                    fontFamily='Calibri'\n                    fill={executingAddress ===  activeAddress + 1 ? 'red' : 'black'}\n                />\n            </Fragment>\n        );\n\n    }\n\n    return (\n        <Block\n            id={id}\n            x={x}\n            y={y}\n            width={RAM_BLOCK_WIDTH}\n            height={RAM_BLOCK_HEIGHT}\n            connections={getConnections(id)}\n            slot={slot}\n            color={RAM_BLOCK_COLOR}\n        />\n    );\n}","import { BLOCK_CONNECTION_SIZE, SUM_BLOCK_WIDTH, SUM_BLOCK_HEIGHT } from '../../../../globals/globals';\n\nexport default function (id) {\n    let inputConnections = [\n        {\n            id: id + '.in1',\n            name: 'in1',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'in',\n            blockId: id,\n        },\n        {\n            id: id + '.in2',\n            name: 'in2',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'in',\n            blockId: id,\n        },\n        {\n            id: id + '.oEn',\n            name: 'oEn',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'in',\n            blockId: id,\n        },\n    ];\n    let outputConnections = [\n        {\n            id: id + '.out',\n            name: 'out',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'out',\n            blockId: id,\n        },\n    ];\n\n    const inputConnectionsYOffset = SUM_BLOCK_HEIGHT / (inputConnections.length + 1);\n    const outputConnectionsYOffset = SUM_BLOCK_HEIGHT / (outputConnections.length + 1);\n\n    inputConnections = inputConnections.map((connection, index) => {\n        connection.position = {\n            x: 0,\n            y: (index + 1) * inputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n        };\n        return connection\n    });\n\n    outputConnections = outputConnections.map((connection, index) => {\n        connection.position = {\n            x: SUM_BLOCK_WIDTH - BLOCK_CONNECTION_SIZE,\n            y: (index + 1) * outputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n        };\n        return connection;\n    });\n\n    return [\n        ...inputConnections,\n        ...outputConnections,\n    ]\n};","import Block from \"../../Block\";\n\nimport {SUM_BLOCK_WIDTH, SUM_BLOCK_HEIGHT, SUM_BLOCK_COLOR} from \"../../../../globals/globals\";\nimport getConnections from './connections';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {useEffect, useRef} from \"react\";\nimport {updateWirePayload} from \"../../../../store/slices/wireSlice\";\nimport {Text} from \"react-konva\";\n\nexport default function Sum({id, x, y, name}) {\n    const dispatch = useDispatch();\n\n    const clk = useSelector(state => state.clkReducer.clk);\n    const wires = useSelector(state => state.wireReducer.wires.filter(wire => {\n            return wire.connections.find(connection => connection.split('.')[0] === id);\n        })\n    );\n    const wiresRef = useRef([]);\n\n    const connections = getConnections(id);\n\n    useEffect(() => {\n        wiresRef.current = wires;\n    }, [wires]);\n\n    useEffect(() => {\n        if (clk === 1) {\n            const in1Wire = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.in1`));\n            const in2Wire = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.in2`));\n            const oEnWire = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.oEn`));\n            const outWire = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.out`));\n\n            if (!in1Wire || !in2Wire || !outWire || !oEnWire) {\n                return;\n            }\n\n            if (in1Wire.payload === 'z' || in2Wire.payload === 'z') {\n                return;\n            }\n\n            const isOenStable = oEnWire.payload === 1 && oEnWire.prevPayload === 1;\n\n            if (isOenStable) {\n                dispatch(updateWirePayload({\n                    id: outWire.id,\n                    payload: +in1Wire.payload + +in2Wire.payload,\n                }));\n            }\n\n        }\n    }, [clk]);\n\n\n    const slot = (\n        <Text\n            x={0}\n            y={0}\n            text={name}\n            fontSize={22}\n            fontFamily='Calibri'\n            fill='black'\n        />\n    );\n\n    return (\n        <Block\n            id={id}\n            x={x}\n            y={y}\n            width={SUM_BLOCK_WIDTH}\n            height={SUM_BLOCK_HEIGHT}\n            connections={connections}\n            slot={slot}\n            color={SUM_BLOCK_COLOR}\n        />\n    );\n}\n","import { BLOCK_CONNECTION_SIZE, INSTRUCTION_REGISTER_BLOCK_HEIGHT } from '../../../../globals/globals';\n\nexport default function (id) {\n    let inputConnections = [\n        {\n            id: id + '.in',\n            name: 'in',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'in',\n            blockId: id,\n        },\n        {\n            id: id + '.en',\n            name: 'en',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'in',\n            blockId: id,\n        },\n    ];\n\n    const inputConnectionsYOffset = INSTRUCTION_REGISTER_BLOCK_HEIGHT / (inputConnections.length + 1);\n\n    inputConnections = inputConnections.map((connection, index) => {\n        connection.position = {\n            x: 0,\n            y: (index + 1) * inputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n        };\n        return connection\n    });\n\n    return [\n        ...inputConnections,\n    ]\n};","import {Group, Rect, Text} from \"react-konva\";\nimport {INSTRUCTION_REGISTER_BLOCK_WIDTH, INSTRUCTION_REGISTER_BLOCK_HEIGHT} from \"../../../../globals/globals\";\n\nexport default function StateDisplayRectangle({ state }) {\n    const height = 50;\n    const width = 100;\n\n  return (\n    <Group x={INSTRUCTION_REGISTER_BLOCK_WIDTH / 2 - width / 2} y={INSTRUCTION_REGISTER_BLOCK_HEIGHT / 2 - height / 2}>\n      <Rect\n        x={0}\n        y={0}\n        width={width}\n        height={height}\n        fill={'white'}\n        shadowBlur={5}\n      />\n      <Text\n        x={28}\n        y={15}\n        text={state}\n        fontSize={22}\n        fontFamily='Calibri'\n        fill='black'\n      />\n    </Group>\n  );\n}\n","import Block from \"../../Block\";\n\nimport {INSTRUCTION_REGISTER_BLOCK_WIDTH, INSTRUCTION_REGISTER_BLOCK_HEIGHT, INSTRUCTION_REGISTER_BLOCK_COLOR} from \"../../../../globals/globals\";\nimport getConnections from './connections';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {Fragment, useEffect, useRef, useState} from \"react\";\nimport {Text} from \"react-konva\";\nimport StateDisplayRectangle from \"./StateDisplayRectangle\";\nimport { changeCurrentCommand } from '../../../../store/slices/commandSlice';\nimport { setClkPosition } from '../../../../store/slices/clkSlice';\nimport {changeBlockPayload, resetSignalTouch} from '../../../../store/slices/blockSlice';\nimport toHex from \"../../../../utils/toHex\";\nimport {resetUpdatedOnCurrentEdgeCount} from \"../../../../store/slices/wireSlice\";\n\nexport default function InstructionRegister({id, x, y, name}) {\n    const dispatch = useDispatch();\n\n    let [shouldChangeCommandOnNextStep, setShouldChangeCommandOnNextStep] = useState(false);\n    let [isInitialRender, setIsInitialRender] = useState(true);\n\n    const block = useSelector(state => state.blockReducer.blocks.find(block => block.id === id));\n    const clk = useSelector(state => state.clkReducer.clk);\n    const clkPosition = useSelector(state => state.clkReducer.clkPosition);\n    const wires = useSelector(state => state.wireReducer.wires.filter(wire => {\n            return wire.connections.find(connection => connection.split('.')[0] === id);\n        })\n    );\n    const wiresRef = useRef([]);\n\n    const connections = getConnections(id);\n\n    useEffect(() => {\n        wiresRef.current = wires;\n    }, [wires]);\n\n    useEffect(() => {\n        if (clk === 1) {\n            setTimeout(() => {\n                const inWire = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.in`));\n                const enWire = wiresRef.current.find(wire => wire.connections.find(connection => connection === `${id}.en`));\n\n                if (!inWire || !enWire) {\n                    return;\n                }\n\n                if (shouldChangeCommandOnNextStep) {\n                    dispatch(changeCurrentCommand(block.payload));\n                    dispatch(resetSignalTouch());\n                    dispatch(resetUpdatedOnCurrentEdgeCount());\n                    dispatch(setClkPosition((clkPosition - 1) % 4 + 2)); // (clkPosition - 1) % 4 + 1\n                    setShouldChangeCommandOnNextStep(false);\n                }\n\n                const isEnWireStable = enWire.payload === 1 && enWire.prevPayload === 1;\n\n                if (isEnWireStable) {\n                    setTimeout(() => {\n                        dispatch(changeBlockPayload({\n                            payload: inWire.payload,\n                            blockId: id,\n                        }));\n                    }, 0);\n                }\n            }, 0);\n        }\n    }, [clk]);\n\n    useEffect(() => {\n        if (!isInitialRender) {\n            setShouldChangeCommandOnNextStep(true);\n        } else {\n            dispatch(changeCurrentCommand(block.payload));\n        }\n        setIsInitialRender(false);\n    }, [block.payload]);\n\n\n    const slot = (\n        <Fragment>\n            <StateDisplayRectangle state={toHex(block.payload)} />\n            <Text\n                x={0}\n                y={0}\n                text={name}\n                fontSize={22}\n                fontFamily='Calibri'\n                fill='black'\n            />\n        </Fragment>\n    );\n\n    return (\n        <Block\n            id={id}\n            x={x}\n            y={y}\n            width={INSTRUCTION_REGISTER_BLOCK_WIDTH}\n            height={INSTRUCTION_REGISTER_BLOCK_HEIGHT}\n            connections={connections}\n            slot={slot}\n            color={INSTRUCTION_REGISTER_BLOCK_COLOR}\n        />\n    );\n}\n","import { BLOCK_CONNECTION_SIZE, GLOBAL_SIG_BLOCK_WIDTH, GLOBAL_SIG_BLOCK_HEIGHT } from '../../../../globals/globals';\n\nexport default function (id) {\n    let outputConnections = [\n        {\n            id: id + '.out',\n            name: 'out',\n            connectedTo: null,\n            connectedToType: null,\n            type: 'out',\n            blockId: id,\n        },\n    ];\n    const outputConnectionsYOffset = GLOBAL_SIG_BLOCK_HEIGHT / (outputConnections.length + 1);\n    outputConnections = outputConnections.map((connection, index) => {\n        connection.position = {\n            x: GLOBAL_SIG_BLOCK_WIDTH - BLOCK_CONNECTION_SIZE,\n            y: (index + 1) * outputConnectionsYOffset - BLOCK_CONNECTION_SIZE / 2\n        };\n        return connection;\n    });\n\n    return [\n        ...outputConnections,\n    ]\n};","import registerConnections from '../components/field/logic-blocks/register/connections';\nimport incConnections from '../components/field/logic-blocks/inc/connections';\nimport logicOneConnections from '../components/field/logic-blocks/logic-one/connections';\nimport logicZeroConnections from '../components/field/logic-blocks/logic-zero/connections';\nimport RomConnections from '../components/field/logic-blocks/rom/connections';\nimport RamConnections from '../components/field/logic-blocks/ram/connections';\nimport SumConnections from '../components/field/logic-blocks/sum/connections';\nimport globalSigConnections from '../components/field/logic-blocks/global-sig/connections';\nimport controlUnitConnections from '../components/field/logic-blocks/control-unit/connections';\nimport instructionRegisterConnections from '../components/field/logic-blocks/instruction-register/connections';\n\nimport {\n    REGISTER_BLOCK_TYPE,\n    INC_BLOCK_TYPE,\n    LOGIC_ONE_BLOCK_TYPE,\n    LOGIC_ZERO_BLOCK_TYPE,\n    ROM_BLOCK_TYPE,\n    RAM_BLOCK_TYPE,\n    SUM_BLOCK_TYPE,\n    GLOBAL_SIG_BLOCK_TYPE,\n    CONTROL_UNIT_BLOCK_TYPE,\n    INSTRUCTION_REGISTER_BLOCK_TYPE,\n} from \"../globals/globals\";\n\n\nexport default function(type, id) {\n    switch(type.toLowerCase()) {\n        case REGISTER_BLOCK_TYPE:\n            return registerConnections(id);\n        case INC_BLOCK_TYPE:\n            return incConnections(id);\n        case LOGIC_ONE_BLOCK_TYPE:\n            return logicOneConnections(id);\n        case LOGIC_ZERO_BLOCK_TYPE:\n            return logicZeroConnections(id);\n        case ROM_BLOCK_TYPE:\n            return RomConnections(id);\n        case RAM_BLOCK_TYPE:\n            return RamConnections(id);\n        case SUM_BLOCK_TYPE:\n            return SumConnections(id);\n        case GLOBAL_SIG_BLOCK_TYPE:\n            return globalSigConnections(id);\n        case CONTROL_UNIT_BLOCK_TYPE:\n            return controlUnitConnections(id);\n        case INSTRUCTION_REGISTER_BLOCK_TYPE:\n            return instructionRegisterConnections(id);\n    }\n}","export default function (id) {\n    return [];\n}","import Block from \"../../Block\";\n\nimport {GLOBAL_SIG_BLOCK_WIDTH, GLOBAL_SIG_BLOCK_HEIGHT, GLOBAL_SIG_BLOCK_COLOR} from \"../../../../globals/globals\";\nimport getConnections from './connections';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {useEffect, useRef, useState} from \"react\";\nimport {updateWirePayload} from \"../../../../store/slices/wireSlice\";\nimport {addGlobalSignal} from \"../../../../store/slices/blockSlice\";\nimport {Text} from \"react-konva\";\n\nexport default function GlobalSig({id, x, y, name}) {\n    const dispatch = useDispatch();\n\n    const clk = useSelector(state => state.clkReducer.clk);\n    const wires = useSelector(state => state.wireReducer.wires.filter(wire => {\n            return wire.connections.find(connection => connection.split('.')[0] === id);\n        })\n    );\n    const signal = useSelector(state => state.blockReducer.globalSignals.find(signal => signal.name === name));\n    const connections = getConnections(id);\n\n    useEffect(() => {\n        const outWire = wires.find(wire => wire.connections.find(connection => connection === `${id}.out`));\n\n        if (!outWire || !signal) {\n            return;\n        }\n\n        if (signal.value !== 'z' && signal.touched) {\n            dispatch(updateWirePayload({\n                id: outWire.id,\n                payload: signal.value,\n            }));\n        }\n    }, [signal?.touched]);\n\n    useEffect(() => {\n        dispatch(addGlobalSignal({\n            name: name,\n            blockId: id,\n        }));\n    }, [name]);\n\n    const slot = (\n        <Text\n            x={0}\n            y={0}\n            width={GLOBAL_SIG_BLOCK_WIDTH}\n            text={name}\n            fontSize={20}\n            fontFamily='Calibri'\n            fill='black'\n        />\n    );\n\n    return (\n        <Block\n            id={id}\n            x={x}\n            y={y}\n            width={GLOBAL_SIG_BLOCK_WIDTH}\n            height={GLOBAL_SIG_BLOCK_HEIGHT}\n            connections={connections}\n            slot={slot}\n            color={GLOBAL_SIG_BLOCK_COLOR}\n        />\n    );\n}\n","import {useDispatch, useSelector} from \"react-redux\";\nimport {Fragment, useEffect} from \"react\";\nimport {updateGlobalSignal} from \"../../../../store/slices/blockSlice\";\nimport {openCommandModal, setCommandLength, setCommandCode} from \"../../../../store/slices/commandSlice\";\nimport {Text} from \"react-konva\";\nimport Block from \"../../Block\";\nimport {CONTROL_UNIT_BLOCK_COLOR, CONTROL_UNIT_BLOCK_HEIGHT, CONTROL_UNIT_BLOCK_WIDTH} from \"../../../../globals/globals\";\nimport getConnections from \"../control-unit/connections\";\nimport {Html} from \"react-konva-utils\";\n\nexport default function ControlUnit({id, x, y, name}) {\n    const dispatch = useDispatch();\n\n    const globalSignals = useSelector(state => state.blockReducer.globalSignals);\n    const commands = useSelector(state => state.blockReducer.commands);\n    const clk = useSelector(state => state.clkReducer.clk);\n    const clkPosition = useSelector(state => state.clkReducer.clkPosition);\n    const currentCommand = useSelector(state => state.commandReducer.currentCommand);\n    const commandLength = useSelector(state => state.commandReducer.commandLength);\n    const connections = getConnections(id);\n\n    useEffect(() => {\n        const isRisingEdge = (clkPosition + 1) % 4 === 0;\n\n        if (!isRisingEdge) {\n            return;\n        }\n\n        if (!commands.find(command => command.commandCode === currentCommand)) {\n            return;\n        }\n\n        globalSignals.forEach(signal => {\n            if (signal.commands.find(command => command.commandCode === currentCommand).ones.map(one => one * 4 - 1).includes(clkPosition)) {\n                dispatch(updateGlobalSignal({\n                    blockId: signal.blockId,\n                    value: 1,\n                    touched: true,\n                }));\n            } else if (!signal.commands.find(command => +command.commandCode === +currentCommand).ones.map(one => one * 4 - 1).includes(clkPosition)) {\n                dispatch(updateGlobalSignal({\n                    blockId: signal.blockId,\n                    value: 0,\n                    touched: true,\n                }));\n            }\n        });\n\n    }, [clkPosition]);\n\n    const handleBtnClick = () => {\n        dispatch(openCommandModal());\n    };\n\n    const slot = (\n        <Fragment>\n            <Text\n                x={0}\n                y={0}\n                text={name}\n                fontSize={22}\n                fontFamily='Calibri'\n                fill='black'\n            />\n            <Html divProps={{\n                style: {\n                    display: 'flex',\n                    flexDirection: 'column',\n                    marginTop: '35px',\n                    marginLeft: '2px',\n                },\n            }}>\n                <button onClick={handleBtnClick} style={{width: '140px'}}>Command editor</button>\n            </Html>\n        </Fragment>\n    );\n\n    return (\n        <Block\n            id={id}\n            x={x}\n            y={y}\n            width={CONTROL_UNIT_BLOCK_WIDTH}\n            height={CONTROL_UNIT_BLOCK_HEIGHT}\n            connections={connections}\n            slot={slot}\n            color={CONTROL_UNIT_BLOCK_COLOR}\n        />\n    );\n}","import {useRef, useEffect, Fragment} from 'react';\nimport {Stage, Layer} from 'react-konva';\nimport { ReactReduxContext, Provider, useDispatch, useSelector } from \"react-redux\";\nimport { resetWire, updateActiveWirePath, deleteWire, setActivePathNodesCount } from \"../../store/slices/wireSlice\";\nimport {\n    changeBlockConnection,\n    changeBlockPosition,\n    deleteBlock,\n    setBlockToStorage,\n} from '../../store/slices/blockSlice';\nimport { last } from 'lodash';\nimport { STATES } from '../../globals/globalStates';\nimport { changeState } from \"../../store/slices/globalStateSlice\";\nimport Wire from './Wire';\nimport ClkPanel from \"./clk/ClkPanel\";\nimport WireConnection from \"./WireConnection\";\nimport Register from \"./logic-blocks/register/Register\";\nimport Inc from \"./logic-blocks/inc/Inc\";\nimport LogicOne from \"./logic-blocks/logic-one/LogicOne\";\nimport LogicZero from \"./logic-blocks/logic-zero/LogicZero\";\nimport Rom from './logic-blocks/rom/Rom';\nimport Ram from './logic-blocks/ram/Ram';\nimport Sum from './logic-blocks/sum/Sum';\nimport InstructionRegister from './logic-blocks/instruction-register/InstructionRegister';\nimport getConnections from '../../utils/getConnections';\nimport './field.css'\nimport GlobalSig from \"./logic-blocks/global-sig/GlobalSig\";\n\nimport {\n    BLOCK_SIZES,\n    TOP_PANEL_HEIGHT,\n    FIELD_WIDTH,\n    FIELD_HEIGHT,\n    SIDEBAR_WIDTH,\n\n    REGISTER_BLOCK_TYPE,\n    INC_BLOCK_TYPE,\n    LOGIC_ONE_BLOCK_TYPE,\n    LOGIC_ZERO_BLOCK_TYPE,\n    ROM_BLOCK_TYPE,\n    RAM_BLOCK_TYPE,\n    SUM_BLOCK_TYPE,\n    GLOBAL_SIG_BLOCK_TYPE,\n    CONTROL_UNIT_BLOCK_TYPE,\n    INSTRUCTION_REGISTER_BLOCK_TYPE,\n\n    BLOCK_TYPE_NAME_MAP\n} from \"../../globals/globals\";\nimport ControlUnit from \"./logic-blocks/control-unit/ControlUnit\";\n\n\nexport default function Field() {\n    const blocks = useSelector(state => state.blockReducer.blocks);\n    const wires = useSelector(state => state.wireReducer.wires);\n    const activeConnection = useSelector(state => state.wireReducer.activeConnection);\n    const activePath = useSelector(state => state.wireReducer.activePath);\n    const globalState = useSelector(state => state.globalStateReducer.globalState);\n    const globalStatePayload = useSelector(state => state.globalStateReducer.statePayload);\n    const wireConnections = useSelector(state => state.wireReducer.wireConnections);\n    const activePathNodesCount = useSelector(state => state.wireReducer.activePathNodesCount);\n\n    const layerRef = useRef();\n    const dispatch = useDispatch();\n\n    document.onkeydown = function(evt) {\n        evt = evt || window.event;\n        const escKeyPressed = evt.keyCode === 27;\n        if (escKeyPressed) {\n            dispatch(resetWire());\n        }\n    };\n\n\n    useEffect(() => {\n        const newWire = last(wires);\n        if (!newWire) {\n            return;\n        }\n        const isFromWire = newWire.connections[0].includes('wire');\n\n        if (!isFromWire) {\n            const wireFromBlock = blocks.find(block => {\n                return (block.id).toString() === newWire.connections[0].split('.')[0]\n            });\n            dispatch(changeBlockConnection({\n                blockId: wireFromBlock.id,\n                connectionId: newWire.connections[0],\n                connectedTo: newWire.id,\n            }));\n        }\n\n        const isToWire = newWire.connections[1].includes('wire');\n\n        if (!isToWire) {\n            const wireToBlock = blocks.find(block => (block.id).toString() === newWire.connections[1].split('.')[0]);\n            dispatch(changeBlockConnection({\n                blockId: wireToBlock.id,\n                connectionId: newWire.connections[1],\n                connectedTo: newWire.id,\n            }));\n        }\n\n        dispatch(resetWire());\n    }, [wires.length]);\n\n    const handleClickOnField = event => {\n        const position = layerRef.current.getRelativePointerPosition();\n\n        if (globalState === STATES.ADDING_BLOCKS) {\n            dispatch(changeBlockPosition({\n                blockId: last(blocks).id,\n                position: {\n                    x: position.x,\n                    y: position.y,\n                }\n            }));\n            dispatch(changeState(STATES.GENERAL));\n        } else if (globalState === STATES.DELETING) {\n\n            const deleteX = position.x;\n            const deleteY = position.y;\n\n            const wire = wires.find(wire => {\n                return wire.path.find((_, index) => {\n                    if (index % 2 !== 0) {\n                        return false;\n                    }\n                    if (!wire.path[index + 3]) {\n                        return false;\n                    }\n\n                    const firstPoint = [wire.path[index], wire.path[index + 1]];\n                    const secondPoint = [wire.path[index + 2], wire.path[index + 3]];\n\n                    const A = firstPoint[1] - secondPoint[1];\n                    const B = secondPoint[0] - firstPoint[0];\n                    const C = firstPoint[0] * secondPoint[1] - secondPoint[0] * firstPoint[1];\n                    const distanceToWire = Math.abs(A * deleteX + B * deleteY + C) / (Math.sqrt(A * A + B * B));\n\n                    const clickedOnWire = distanceToWire < 5;\n                    return clickedOnWire;\n                });\n            });\n\n            if (wire) {\n                dispatch(deleteWire({\n                    wireId: wire.id\n                }));\n                return;\n            }\n\n            const block = blocks.find(block => {\n                const blockWidth = BLOCK_SIZES[block.type].width;\n                const blockHeight = BLOCK_SIZES[block.type].height;\n\n                return  (deleteX >= block.position.x && deleteX <= block.position.x + blockWidth)\n                    && (deleteY >= block.position.y && deleteY <= block.position.y + blockHeight)\n            });\n\n            if (!block) {\n                return;\n            }\n\n            dispatch(deleteBlock({\n                blockId: block.id\n            }));\n\n        } else if (activeConnection !== null) {\n            dispatch(setActivePathNodesCount(activePathNodesCount + 1));\n            dispatch(updateActiveWirePath({\n                x: position.x,\n                y: position.y,\n            }));\n        }\n    }\n\n    useEffect(() => {\n        if (globalState === STATES.CANCEL_ADDING_BLOCKS) {\n\n            dispatch(deleteBlock({\n                blockId: last(blocks)?.id\n            }));\n            dispatch(changeState(STATES.GENERAL));\n            return;\n        }\n\n        if (globalState === STATES.ADDING_BLOCKS) {\n            const lastBlockId = +last(blocks)?.id + 1 || 0;\n            dispatch(setBlockToStorage({\n                id: lastBlockId.toString(),\n                type: globalStatePayload.blockType,\n                name: BLOCK_TYPE_NAME_MAP[globalStatePayload.blockType],\n                position: {x: 100, y: 100},\n                connections: getConnections(globalStatePayload.blockType, lastBlockId),\n                payload: 0,\n            }));\n        }\n    }, [globalState, globalStatePayload]);\n\n    const handleMouseMove = event => { //useThrottle\n        const position = layerRef.current.getRelativePointerPosition();\n\n        if (globalState === STATES.ADDING_BLOCKS) {\n            const lastBlockId = last(blocks)?.id || 0;\n\n            dispatch(changeBlockPosition({\n                blockId: lastBlockId,\n                position: {\n                    x: position.x,\n                    y: position.y\n                }\n            }));\n        } else if (activeConnection !== null) {\n            dispatch(updateActiveWirePath({\n                x: position.x - 3,\n                y: position.y - 3,\n            }));\n        }\n    };\n\n    return (\n        <ReactReduxContext.Consumer>\n            {({ store }) => (\n                <Fragment>\n                    <Stage\n                        className={'field'}\n                        width={FIELD_WIDTH}\n                        height={FIELD_HEIGHT}\n                        onClick={handleClickOnField}\n                        onMouseMove={handleMouseMove}\n                        onMouseEnter={e => {\n                            const container = e.target.getStage().container();\n                            if (globalState === STATES.DELETING) {\n                                container.style.cursor = \"crosshair\";\n                            } else  {\n                                container.style.cursor = \"default\";\n                            }\n                        }}\n                    >\n                        <Provider store={store}>\n                            <Layer x={0} y={0} ref={layerRef}>\n                                <Fragment>\n                                    {blocks.map((block, i) => {\n                                        switch (block.type) {\n                                            case REGISTER_BLOCK_TYPE:\n                                                return <Register\n                                                    id={block.id}\n                                                    key={block.id}\n                                                    x={block.position.x}\n                                                    y={block.position.y}\n                                                    name={block.name}\n                                                />;\n                                            case INC_BLOCK_TYPE:\n                                                return <Inc\n                                                    id={block.id}\n                                                    key={block.id}\n                                                    x={block.position.x}\n                                                    y={block.position.y}\n                                                    name={block.name}\n                                                />;\n                                            case LOGIC_ONE_BLOCK_TYPE:\n                                                return <LogicOne\n                                                    id={block.id}\n                                                    key={block.id}\n                                                    x={block.position.x}\n                                                    y={block.position.y}\n                                                    name={block.name}\n                                                />;\n                                            case LOGIC_ZERO_BLOCK_TYPE:\n                                                return <LogicZero\n                                                    id={block.id}\n                                                    key={block.id}\n                                                    x={block.position.x}\n                                                    y={block.position.y}\n                                                    name={block.name}\n                                                />;\n                                            case ROM_BLOCK_TYPE:\n                                                return <Rom\n                                                    id={block.id}\n                                                    key={block.id}\n                                                    x={block.position.x}\n                                                    y={block.position.y}\n                                                    name={block.name}\n                                                />;\n                                            case RAM_BLOCK_TYPE:\n                                                return <Ram\n                                                    id={block.id}\n                                                    key={block.id}\n                                                    x={block.position.x}\n                                                    y={block.position.y}\n                                                    name={block.name}\n                                                />;\n                                            case SUM_BLOCK_TYPE:\n                                                return <Sum\n                                                    id={block.id}\n                                                    key={block.id}\n                                                    x={block.position.x}\n                                                    y={block.position.y}\n                                                    name={block.name}\n                                                />;\n                                            case GLOBAL_SIG_BLOCK_TYPE:\n                                                return <GlobalSig\n                                                    id={block.id}\n                                                    key={block.id}\n                                                    x={block.position.x}\n                                                    y={block.position.y}\n                                                    name={block.name}\n                                                />;\n                                            case CONTROL_UNIT_BLOCK_TYPE:\n                                                return <ControlUnit\n                                                    id={block.id}\n                                                    key={block.id}\n                                                    x={block.position.x}\n                                                    y={block.position.y}\n                                                    name={block.name}\n                                                />;\n                                            case INSTRUCTION_REGISTER_BLOCK_TYPE:\n                                                return <InstructionRegister\n                                                    id={block.id}\n                                                    key={block.id}\n                                                    x={block.position.x}\n                                                    y={block.position.y}\n                                                    name={block.name}\n                                                />;\n                                        }\n                                    })}\n                                    {wireConnections.map((connection, i) => {\n                                        return <WireConnection\n                                            id={connection.id}\n                                            key={connection.id}\n                                            x={connection.position.x}\n                                            y={connection.position.y}\n                                            wireId={connection.wireId}\n                                        />\n                                    })}\n                                    {wires.map((wire, i) => {\n                                        return <Wire\n                                            id={wire.id}\n                                            key={wire.id}\n                                            points={wire.path}\n                                        />;\n                                    })}\n                                    {activePath &&\n                                        <Wire\n                                            id={'activeWire'}\n                                            key={'activeWire'}\n                                            points={[...activePath]}\n                                        />\n                                    }\n                                </Fragment>\n                            </Layer>\n                        </Provider>\n                    </Stage>\n                    <ClkPanel/>\n                </Fragment>\n            )}\n        </ReactReduxContext.Consumer>\n    );\n}","import './Block.css'\nimport './register/register.css'\nimport './inc/inc.css'\nimport {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { STATES } from '../../../../globals/globalStates';\nimport { changeState } from \"../../../../store/slices/globalStateSlice\";\nimport { setActiveBlockType } from \"../../../../store/slices/topPanelSlice\";\n\nexport default function Block({ type }) {\n    const dispatch = useDispatch();\n    const [blockBodyStyle, setBlockBodyStyle] = useState(`${type}-body`);\n    const globalState = useSelector(state => state.globalStateReducer.globalState);\n    const activeBlockType = useSelector(state => state.topPanelReducer.activeBlockType);\n\n    useEffect(() => {\n        if (activeBlockType === type) {\n            setBlockBodyStyle(blockBodyStyle + ' active');\n        } else {\n            setBlockBodyStyle(blockBodyStyle.replace(' active', ''));\n        }\n\n        if (activeBlockType) {\n            let alreadyMoving = globalState === STATES.ADDING_BLOCKS;\n            dispatch(changeState({\n                state: STATES.ADDING_BLOCKS,\n                statePayload: {\n                    blockType: activeBlockType,\n                    alreadyMoving: alreadyMoving\n                },\n            }));\n        } else if (globalState !== STATES.GENERAL) {\n            dispatch(changeState(STATES.CANCEL_ADDING_BLOCKS));\n        }\n    }, [activeBlockType]);\n\n\n    useEffect(() => {\n        if (globalState === STATES.GENERAL) {\n            dispatch(setActiveBlockType(null))\n        }\n    }, [globalState]);\n\n\n    const handleClick = () => {\n        dispatch(setActiveBlockType(type))\n    };\n\n    return (\n        <div onClick={handleClick} className={`${type} blocks-list__item`}>\n            <div className={blockBodyStyle}>\n\n            </div>\n            <div className={`${type}-label`}>\n                { type }\n            </div>\n        </div>\n    );\n}","import './register.css'\nimport Block from \"../Block\";\nimport { REGISTER_BLOCK_TYPE } from \"../../../../../globals/globals\";\n\nexport default function Register() {\n    return (\n       <Block type={REGISTER_BLOCK_TYPE} />\n    );\n}","import './inc.css'\nimport Block from \"../Block\";\nimport { INC_BLOCK_TYPE } from \"../../../../../globals/globals\";\n\nexport default function Inc() {\n    return (\n        <Block type={INC_BLOCK_TYPE} />\n    );\n}","import './logicOne.css'\nimport Block from \"../Block\";\nimport { LOGIC_ONE_BLOCK_TYPE } from \"../../../../../globals/globals\";\n\nexport default function LogicOne() {\n    return (\n        <Block type={LOGIC_ONE_BLOCK_TYPE} />\n    );\n}","import './logicZero.css'\nimport Block from \"../Block\";\nimport { LOGIC_ZERO_BLOCK_TYPE } from \"../../../../../globals/globals\";\n\nexport default function LogicZero() {\n    return (\n        <Block type={LOGIC_ZERO_BLOCK_TYPE} />\n    );\n}","import './rom.css'\nimport Block from \"../Block\";\nimport { ROM_BLOCK_TYPE } from \"../../../../../globals/globals\";\n\nexport default function Rom() {\n    return (\n        <Block type={ROM_BLOCK_TYPE} />\n    );\n}","import './ram.css'\nimport Block from \"../Block\";\nimport { RAM_BLOCK_TYPE } from \"../../../../../globals/globals\";\n\nexport default function Ram() {\n    return (\n        <Block type={RAM_BLOCK_TYPE} />\n    );\n}","import './sum.css'\nimport Block from \"../Block\";\nimport { SUM_BLOCK_TYPE } from \"../../../../../globals/globals\";\n\nexport default function Sum() {\n    return (\n        <Block type={SUM_BLOCK_TYPE} />\n    );\n}","import './globalSig.css'\nimport Block from \"../Block\";\nimport { GLOBAL_SIG_BLOCK_TYPE } from \"../../../../../globals/globals\";\n\nexport default function GlobalSig() {\n    return (\n        <Block type={GLOBAL_SIG_BLOCK_TYPE} />\n    );\n}","import './instructionRegister.css'\nimport Block from \"../Block\";\nimport { INSTRUCTION_REGISTER_BLOCK_TYPE } from \"../../../../../globals/globals\";\n\nexport default function InstructionRegister() {\n    return (\n        <Block type={INSTRUCTION_REGISTER_BLOCK_TYPE} />\n    );\n}","import './controlUnit.css'\nimport Block from \"../Block\";\nimport { CONTROL_UNIT_BLOCK_TYPE } from \"../../../../../globals/globals\";\n\nexport default function ControlUnit() {\n    return (\n       <Block type={CONTROL_UNIT_BLOCK_TYPE} />\n    );\n}","import './blocks-list.css';\n\nimport Register from \"./blocks/register/Register\";\nimport Inc from \"./blocks/inc/Inc\";\nimport LogicOne from \"./blocks/logicOne/logicOne\";\nimport LogicZero from \"./blocks/logicZero/logicZero\";\nimport Rom from \"./blocks/rom/Rom\";\nimport Ram from \"./blocks/ram/Ram\";\nimport Sum from \"./blocks/sum/Sum\";\nimport GlobalSig from \"./blocks/globalSig/globalSig\";\nimport InstructionRegister from \"./blocks/instructionRegister/instructionRegister\";\nimport ControlUnit from \"./blocks/controlUnit/controlUnit\";\n\nexport default function BlocksList() {\n    const blocks = [\n        <Register key={1} />,\n        <Inc key={2} />,\n        <LogicOne key={3} />,\n        <LogicZero key={4} />,\n        <Rom key={5} />,\n        <Ram key={6} />,\n        <Sum key={7} />,\n        <GlobalSig key={8} />,\n        <ControlUnit key={9} />,\n        <InstructionRegister key={10} />,\n    ];\n\n\n    return (\n        <div className='blocks-list'>\n            { blocks }\n        </div>\n    );\n}","export default async function saveState(state) {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('redux', serializedState);\n    } catch (e) {\n        // Ignore\n    }\n}","import './SaveState.css';\nimport saveStateToLocalStorage from '../../../../../store/localstorageApi/saveState';\nimport saveToFile from \"../../../../../utils/saveToFile\";\nimport store from '../../../../../store/store'\nimport downloadFile from \"../../../../../utils/downloadFile\";\n\nexport default function saveState() {\n    const handleSaveState = () => {\n        const file = saveToFile(JSON.stringify(store.getState(), null, 2));\n        downloadFile(file);\n        saveStateToLocalStorage(JSON.stringify(store.getState()));\n    };\n\n    return (\n        <button className=\"save-state-btn\" onClick={handleSaveState}>\n            Save state\n        </button>\n    );\n};","export default function(fileContents) {\n    return new File(\n        [fileContents],\n        \"state.json\", {\n            type: 'application/json'\n        }\n    );\n};","export default function(file) {\n    // Create a link and set the URL using `createObjectURL`\n    const link = document.createElement(\"a\");\n    link.style.display = \"none\";\n    link.href = URL.createObjectURL(file);\n    link.download = file.name;\n\n    // It needs to be added to the DOM so it can be clicked\n    document.body.appendChild(link);\n    link.click();\n\n    // To make this work on Firefox we need to wait\n    // a little while before removing it.\n    setTimeout(() => {\n        URL.revokeObjectURL(link.href);\n        link.parentNode.removeChild(link);\n    }, 0);\n};","import './LoadState.css';\nimport saveStateToLocalStorage from '../../../../../store/localstorageApi/saveState';\n\nexport default function saveState() {\n    const handleLoadState = () => {\n        const input = document.querySelector('.load-state-input');\n        input.click();\n    };\n\n    const handleFileInput = event => {\n        const file = event.target.files[0];\n        let fileContents;\n\n        const reader = new FileReader();\n        reader.readAsText(file, \"UTF-8\");\n        reader.onload = function (event) {\n            fileContents = event.target.result;\n            saveStateToLocalStorage(fileContents);\n            window.location.reload();\n        }\n    };\n\n    return (\n        <>\n            <button className=\"load-state-btn\" onClick={handleLoadState}>\n                Load state\n            </button>\n            <input className=\"load-state-input\" type=\"file\" onChange={handleFileInput}/>\n        </>\n    );\n};","import saveStateToLocalStorage from \"../../../../../store/localstorageApi/saveState\";\nimport './ClearField.css';\nimport Swal from 'sweetalert2';\n\n\nconst swalWithButtons = Swal.mixin({\n    customClass: {\n        confirmButton: 'btn confirm-clear-btn',\n        cancelButton: 'btn dismiss-clear-btn'\n    },\n    buttonsStyling: false\n})\n\nexport default function ClearField() {\n    const handleDeleteState = () => {\n        swalWithButtons.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonText: 'Yes',\n            cancelButtonText: 'No',\n            reverseButtons: true\n        }).then((result) => {\n            if (result.isConfirmed) {\n                saveStateToLocalStorage('');\n                window.location.reload();\n            }\n        })\n    };\n\n    return (\n        <button className=\"clear-field-btn\" onClick={handleDeleteState}>\n            Clear field\n        </button>\n    );\n}","import './Delete.css';\nimport {useEffect, useState} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeState } from \"../../../../../store/slices/globalStateSlice\";\nimport { STATES } from '../../../../../globals/globalStates';\n\nexport default function Delete() {\n    let dispatch = useDispatch();\n    let [isActive, setIsActive] = useState(false);\n\n    useEffect(() => {\n        if (isActive) {\n            dispatch(changeState(STATES.DELETING));\n        } else {\n            dispatch(changeState(STATES.GENERAL));\n        }\n    }, [isActive])\n\n\n    function toggleActive() {\n        setIsActive(!isActive);\n    }\n\n    return (\n        <div className={`delete-cross ${isActive ? 'delete-cross_active': ''}`} onClick={toggleActive}>\n\n        </div>\n    );\n}","import './ToolsList.css';\nimport SaveState from \"./tools/saveState/SaveState\";\nimport LoadState from \"./tools/loadState/LoadState\";\nimport ClearField from \"./tools/clearField/ClearField\";\nimport Delete from \"./tools/delete/Delete\";\n\nexport default function ToolsList() {\n    const tools = [\n        <SaveState key={1} />,\n        <LoadState key={2} />,\n        <ClearField key={3} />,\n        <Delete key={4} />\n    ];\n\n    return (\n        <div className=\"tools-list\">\n            { tools }\n        </div>\n    );\n}","import './top-panel.css';\nimport BlocksList from \"./blocks-list/BlocksList\";\nimport ToolsList from \"./tools-list/ToolsList\";\nimport { TOP_PANEL_WIDTH, TOP_PANEL_HEIGHT } from \"../../globals/globals\";\n\nexport default function TopPanel() {\n    return (\n        <div className='top-panel' style={{ width: TOP_PANEL_WIDTH, height: TOP_PANEL_HEIGHT }}>\n            <BlocksList />\n            <ToolsList />\n        </div>\n    );\n}","import './sidebar.css';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { changeBlockName, changeBlockPayload } from '../../store/slices/blockSlice';\nimport { setClkState, resetClk } from \"../../store/slices/clkSlice\";\nimport { setWiresPayloadToZ } from \"../../store/slices/wireSlice\";\nimport { STOP_CLK_STATE, START_CLK_STATE} from \"../../globals/clkStates\";\nimport {\n    REGISTER_BLOCK_TYPE,\n    ROM_BLOCK_TYPE,\n    RAM_BLOCK_TYPE,\n    INSTRUCTION_REGISTER_BLOCK_TYPE\n} from \"../../globals/globals\";\nimport {useEffect, useState} from \"react\";\nimport {cloneDeep} from 'lodash';\nimport toHex from \"../../utils/toHex\";\nimport fromHex from \"../../utils/fromHex\";\n\nexport default function Sidebar() {\n    const selectedBlockId = useSelector(state => state.blockReducer.selectedBlockId);\n    const selectedBlock = useSelector(state => state.blockReducer.blocks.find(block => block.id === selectedBlockId));\n    const clkState = useSelector(state => state.clkReducer.clkState);\n    const dispatch = useDispatch();\n    const [selectedBlockState, setSelectedBlockState] = useState(0);\n\n\n    const handleRegisterStateChange = event => {\n        if (isNaN(fromHex(event.target.value))) {\n            setSelectedBlockState('0x00');\n            return;\n        }\n\n        setSelectedBlockState(event.target.value)\n    };\n\n    useEffect(() => {\n        if (!selectedBlock) {\n            return;\n        }\n\n        let clonedPayload = cloneDeep(selectedBlock.payload);\n\n        if (selectedBlock.type === REGISTER_BLOCK_TYPE) {\n            clonedPayload = toHex(clonedPayload);\n        } else if ([RAM_BLOCK_TYPE, ROM_BLOCK_TYPE].includes(selectedBlock.type)) {\n            clonedPayload.address = toHex(clonedPayload.address);\n            clonedPayload.value = toHex(clonedPayload.value);\n            clonedPayload.executingAddress = toHex(clonedPayload.executingAddress);\n        }\n\n        setSelectedBlockState(clonedPayload);\n    }, [selectedBlock]);\n\n    const handleTextChange = event => {\n        dispatch(changeBlockName({blockId: selectedBlockId, name: event.target.value}));\n    };\n\n    const handlePayloadChange = payload => {\n        let clonedPayload = cloneDeep(payload);\n\n        if ([REGISTER_BLOCK_TYPE, INSTRUCTION_REGISTER_BLOCK_TYPE].includes(selectedBlock.type)) {\n            clonedPayload = fromHex(payload);\n        } else if ([ROM_BLOCK_TYPE, RAM_BLOCK_TYPE].includes(selectedBlock.type)) {\n            clonedPayload.data[fromHex(payload.address)] = fromHex(payload.value);\n            clonedPayload.executingAddress = fromHex(payload.executingAddress);\n        }\n\n        dispatch(changeBlockPayload({blockId: selectedBlockId, payload: clonedPayload}));\n    };\n\n    const toggleClk = () => {\n        dispatch(setClkState(clkState === STOP_CLK_STATE ? START_CLK_STATE : STOP_CLK_STATE));\n    };\n\n    const handleResetClk = () => {\n        dispatch(resetClk());\n        dispatch(setWiresPayloadToZ());\n    };\n\n    let blockInfo = null;\n\n    if (selectedBlock) {\n        let stateInput = null;\n        if ([REGISTER_BLOCK_TYPE, INSTRUCTION_REGISTER_BLOCK_TYPE].includes(selectedBlock.type)) {\n            stateInput = (\n                <>\n                    <div className=\"register-state__title\">\n                        Set register payload\n                    </div>\n                    <input\n                        className={'register-state__input'}\n                        type=\"text\"\n                        onChange={event => handleRegisterStateChange(event)}\n                    />\n                    <button className=\"memory-btn\" onClick={() => handlePayloadChange(selectedBlockState)}>Save</button>\n                </>\n            );\n        }\n\n        if ([ROM_BLOCK_TYPE, RAM_BLOCK_TYPE].includes(selectedBlock.type)) {\n            stateInput = (\n                <>\n                    <div className=\"register-state__title\">\n                        {selectedBlock.type === ROM_BLOCK_TYPE ? 'Set ROM payload' : 'Set RAM payload'}\n                    </div>\n                    <div className=\"address-group\">\n                        Address\n                        <input\n                            className={'memory__input'}\n                            type=\"text\"\n                            onChange={event => setSelectedBlockState({\n                                ...selectedBlockState,\n                                address: event.target.value,\n                            })}\n                        />\n                    </div>\n                    <div className=\"value-group\">\n                        Value\n                        <input\n                            className={'memory__input'}\n                            type=\"text\"\n                            onChange={event => setSelectedBlockState({\n                                ...selectedBlockState,\n                                value: event.target.value,\n                            })}\n                        />\n                    </div>\n                    <div className=\"active-address-group\">\n                        Active address\n                        <input\n                            className={'memory__input'}\n                            type=\"text\"\n                            onChange={event => setSelectedBlockState({\n                                ...selectedBlockState,\n                                executingAddress: event.target.value,\n                            })}\n                        />\n                    </div>\n                    <button className=\"memory-btn\" onClick={() => handlePayloadChange(selectedBlockState)}>Save</button>\n                </>\n            );\n        }\n        blockInfo = (\n            <>\n                <div className={'block-name'}>\n                    <div className=\"block-name__title\">\n                        Set block name\n                    </div>\n                    <input className={'block-name__input'} type=\"text\" value={selectedBlock.name} onChange={handleTextChange}/>\n                </div>\n                {stateInput}\n            </>\n        );\n    }\n\n    let clkButtons = (\n        <div className={'clk-buttons'}>\n            <button className=\"clk-button\" onClick={toggleClk}>\n                {clkState === START_CLK_STATE ? 'Stop clk' : 'Start clk'}\n            </button>\n            <button className=\"reset-clk-button\" onClick={handleResetClk}>\n                Reset clk\n            </button>\n        </div>\n    );\n\n    let content = (\n        <div className=\"content\">\n            {blockInfo}\n            {clkButtons}\n        </div>\n    );\n\n    return (\n        <div className={'sidebar'} key={selectedBlockId}>\n            {content}\n        </div>\n    );\n}","import './commandModal.css';\nimport {useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {closeCommandModal} from \"../../store/slices/commandSlice\";\nimport {setGlobalSignalOnes, setCommands, setCommandsAmount, changeCommandCode} from \"../../store/slices/blockSlice\";\nimport {useEffect} from \"react\";\nimport { range, difference, cloneDeep } from 'lodash';\nimport fromHex from \"../../utils/fromHex\";\nimport toHex from \"../../utils/toHex\";\n\nexport default function CommandModal() {\n    const globalSignals = useSelector(state => state.blockReducer.globalSignals);\n    const commands = useSelector(state => state.blockReducer.commands);\n    const commandAmount = useSelector(state => state.blockReducer.commandsAmount);\n    const dispatch = useDispatch();\n\n    const [localCommandAmount, setLocalCommandAmount] = useState(commandAmount);\n\n    let isOpened = useSelector(state => state.commandReducer.isCommandModalOpened);\n    const closeModal = () => {\n        dispatch(closeCommandModal());\n    };\n\n    let [commandCodes, setCommandCodes] = useState([]);\n\n    useEffect(() => {\n        const commandsCodes = commands.map(command => {\n            return toHex(command.commandCode);\n        });\n        setCommandCodes(commandsCodes);\n    }, []);\n\n    useEffect(() => {\n        if (commands.length > commandAmount) {\n            dispatch(setCommands(commands.slice(0, commandAmount)));\n        } else {\n            const newCommands = [];\n            for (let i = 0; i < commandAmount - commands.length; i++) {\n                newCommands.push({\n                    name: '',\n                    commandCode: i,\n                    length: 10,\n                });\n            }\n            setCommandCodes([...commands, ...newCommands].map((command, i) => command.commandCode === '' ? i : command.commandCode))\n\n\n            dispatch(setCommands([...commands, ...newCommands]));\n        }\n    }, [commandAmount]);\n\n    const handleSignalEdgeInput = (event, signal, edgeNumber, commandIndex) => {\n        if (+event.currentTarget.textContent === 1) {\n            const clonedOnes = cloneDeep(signal.commands[commandIndex].ones);\n            clonedOnes.push(edgeNumber)\n            dispatch(setGlobalSignalOnes({\n                commandCode: commands[commandIndex].commandCode,\n                blockId: signal.blockId,\n                ones: clonedOnes.sort((a, b) => a - b),\n            }));\n        } else if (+event.currentTarget.textContent === 0) {\n            dispatch(setGlobalSignalOnes({\n                commandCode: commands[commandIndex].commandCode,\n                blockId: signal.blockId,\n                ones: difference(signal.commands[commandIndex].ones, [edgeNumber]),\n            }));\n        }\n    };\n\n    const handleLocalCommandAmountChange = event => {\n        setLocalCommandAmount(event.target.value);\n    };\n\n    const handleCommandAmountChange = () => {\n        dispatch(setCommandsAmount(localCommandAmount));\n    };\n\n    const handleCommandSettingsChange = (event, commandIndex) => {\n        const parentNode = event.target.parentNode;\n\n        const nameInput = parentNode.querySelector('.name-input');\n        const codeInput = parentNode.querySelector('.code-input');\n        const lengthInput = parentNode.querySelector('.length-input');\n\n        const commandsCopy = cloneDeep(commands);\n        const commandToChange = commandsCopy[commandIndex];\n        commandToChange.name = nameInput.value;\n\n        const commandCodesCopy = cloneDeep(commandCodes);\n        commandCodesCopy[commandIndex] = codeInput.value;\n        setCommandCodes(commandCodesCopy);\n\n        commandToChange.length = +lengthInput.value;\n\n        dispatch(setCommands(commandsCopy));\n        dispatch(changeCommandCode({commandCode: fromHex(codeInput.value), commandIndex: commandIndex}));\n    };\n\n    return (\n        <div className={`command-modal ${isOpened ? 'command-modal_opened' : ''}`}>\n            <div className=\"close-cross\" onClick={closeModal} />\n            <div className=\"command-modal__content\">\n                <label className=\"commands-amount-label\">\n                    Commands amount\n                    <input type=\"text\" className=\"commands-amount-input\" value={localCommandAmount} onChange={handleLocalCommandAmountChange}/>\n                    <button className=\"commands-amount-btn\" onClick={handleCommandAmountChange}>Change command amount</button>\n                </label>\n                {\n                    commands.map((command, commandIndex) => {\n                        return (\n                            <div className=\"command-content\" key={commandIndex}>\n                                <label className={'command-name-label'}>\n                                    Command name\n                                    <input\n                                        className=\"command-input name-input\"\n                                        type=\"text\"\n                                        defaultValue={command.name}\n                                    />\n                                </label>\n                                <label className={'command-name-label'}>\n                                    Command code\n                                    <input\n                                        className=\"command-input code-input\"\n                                        type=\"text\"\n                                        defaultValue={toHex(commandCodes[commandIndex])}\n                                    />\n                                </label>\n                                <label>\n                                    Command length\n                                    <input\n                                        className=\"command-input length-input\"\n                                        type=\"text\"\n                                        defaultValue={command.length}\n                                    />\n                                </label>\n                                <button className=\"command-settings-btn\" onClick={(e) => handleCommandSettingsChange(e, commandIndex)}>\n                                    Change command settings\n                                </button>\n                                <div className=\"command-modal__table\">\n                                    <div className=\"signals-column\">\n                                        {\n                                            globalSignals.map((signal, index) => {\n                                                return <div className=\"signal-row\" key={index}>\n                                                    { signal.name }\n                                                </div>;\n                                            })\n                                        }\n                                    </div>\n                                    <div className=\"values\">\n                                        <div className=\"values-head-row\">\n                                            {\n                                                range(1, +command.length + 1).map((edgeNumber, index) => {\n                                                    return <div className=\"head-cell cell\" key={index}>\n                                                        { edgeNumber }\n                                                    </div>\n                                                })\n                                            }\n                                        </div>\n                                        <div className=\"values-rows\">\n                                            {\n                                                globalSignals.map((signal, index) => {\n                                                    return <div className=\"values-row\" key={index}>\n                                                        {\n                                                            range(1, +command.length + 1).map((edgeNumber, index2) => {\n                                                                return (\n                                                                    <div\n                                                                        className=\"cell\"\n                                                                        contentEditable={true}\n                                                                        suppressContentEditableWarning={true}\n                                                                        onInput={event => handleSignalEdgeInput(event, signal, edgeNumber, commandIndex)}\n                                                                        key={`${index} ${index2}`}\n                                                                    >\n                                                                        {\n                                                                            signal.commands?.find(signalCommand => signalCommand.commandCode === command.commandCode).ones.includes(edgeNumber)\n                                                                                ? 1\n                                                                                : 0\n                                                                        }\n                                                                    </div>\n                                                                )\n                                                            })\n                                                        }\n                                                    </div>\n                                                })\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        </div>\n    );\n};","import Field from \"./field/Field\";\nimport TopPanel from \"./top-panel/TopPanel\";\nimport Sidebar from \"./sidebar/Sidebar\";\nimport CommandModal from \"./command-modal/CommandModal\";\n\n\nexport default function WorkBench() {\n    return (\n        <div>\n            <CommandModal />\n            <TopPanel />\n            <Sidebar />\n            <Field />\n        </div>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\nimport './index.css'\nimport WorkBench from \"./components/WorkBench\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <WorkBench />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}